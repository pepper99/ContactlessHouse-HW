
ContactlessHouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004814  08004814  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800481c  0800481c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  08004a00  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004a00  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf31  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c1b  00000000  00000000  0002c13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002dd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  0002ea10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016269  00000000  00000000  0002f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000926e  00000000  00000000  00045849  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f612  00000000  00000000  0004eab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de0c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  000de144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004648 	.word	0x08004648

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08004648 	.word	0x08004648

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fcd6 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f82a 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f9ae 	bl	80008fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f982 	bl	80008a8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005a4:	f000 f88e 	bl	80006c4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005a8:	f000 f8de 	bl	8000768 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 f952 	bl	8000854 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0x50>)
 80005b8:	f001 fa5e 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x50>)
 80005c4:	f001 fa58 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <main+0x54>)
 80005ce:	f001 fa53 	bl	8001a78 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  HAL_UART_Receive_IT (&huart1, &buffer, 2);
 80005d2:	2202      	movs	r2, #2
 80005d4:	4904      	ldr	r1, [pc, #16]	; (80005e8 <main+0x58>)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0x5c>)
 80005d8:	f002 fc23 	bl	8002e22 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x4c>
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020800 	.word	0x40020800
 80005e8:	2000028c 	.word	0x2000028c
 80005ec:	2000024c 	.word	0x2000024c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fa40 	bl	8003a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fa32 	bl	8001ae0 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 fa49 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fc8c 	bl	8001fc0 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 fa33 	bl	8000b18 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_ADC1_Init+0x98>)
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <MX_ADC1_Init+0x9c>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_ADC1_Init+0x98>)
 80006de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_ADC1_Init+0x98>)
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_ADC1_Init+0xa0>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_ADC1_Init+0x98>)
 8000712:	2201      	movs	r2, #1
 8000714:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_ADC1_Init+0x98>)
 8000726:	f000 fc7f 	bl	8001028 <HAL_ADC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000730:	f000 f9f2 	bl	8000b18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_ADC1_Init+0x98>)
 8000746:	f000 fcb3 	bl	80010b0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000750:	f000 f9e2 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000204 	.word	0x20000204
 8000760:	40012000 	.word	0x40012000
 8000764:	0f000001 	.word	0x0f000001

08000768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	; 0x38
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000798:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_TIM2_Init+0xe8>)
 800079a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007a0:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <MX_TIM2_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_TIM2_Init+0xe8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_TIM2_Init+0xe8>)
 80007ae:	f04f 32ff 	mov.w	r2, #4294967295
 80007b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_TIM2_Init+0xe8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_TIM2_Init+0xe8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007c0:	4823      	ldr	r0, [pc, #140]	; (8000850 <MX_TIM2_Init+0xe8>)
 80007c2:	f001 fdef 	bl	80023a4 <HAL_TIM_Base_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007cc:	f000 f9a4 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007da:	4619      	mov	r1, r3
 80007dc:	481c      	ldr	r0, [pc, #112]	; (8000850 <MX_TIM2_Init+0xe8>)
 80007de:	f001 ff07 	bl	80025f0 <HAL_TIM_ConfigClockSource>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007e8:	f000 f996 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ec:	4818      	ldr	r0, [pc, #96]	; (8000850 <MX_TIM2_Init+0xe8>)
 80007ee:	f001 fe04 	bl	80023fa <HAL_TIM_PWM_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007f8:	f000 f98e 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4619      	mov	r1, r3
 800080a:	4811      	ldr	r0, [pc, #68]	; (8000850 <MX_TIM2_Init+0xe8>)
 800080c:	f002 fa4e 	bl	8002cac <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000816:	f000 f97f 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081a:	2360      	movs	r3, #96	; 0x60
 800081c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <MX_TIM2_Init+0xe8>)
 8000832:	f001 fe17 	bl	8002464 <HAL_TIM_PWM_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800083c:	f000 f96c 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <MX_TIM2_Init+0xe8>)
 8000842:	f000 f9f9 	bl	8000c38 <HAL_TIM_MspPostInit>

}
 8000846:	bf00      	nop
 8000848:	3738      	adds	r7, #56	; 0x38
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000290 	.word	0x20000290

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_USART1_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 800088c:	f002 fa7c 	bl	8002d88 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f93f 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000024c 	.word	0x2000024c
 80008a4:	40011000 	.word	0x40011000

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART2_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f002 fa52 	bl	8002d88 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f915 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200002d0 	.word	0x200002d0
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a3c      	ldr	r2, [pc, #240]	; (8000a0c <MX_GPIO_Init+0x110>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a35      	ldr	r2, [pc, #212]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a2e      	ldr	r2, [pc, #184]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <MX_GPIO_Init+0x110>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_GPIO_Init+0x110>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_GPIO_Init+0x110>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000988:	4821      	ldr	r0, [pc, #132]	; (8000a10 <MX_GPIO_Init+0x114>)
 800098a:	f001 f875 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	4820      	ldr	r0, [pc, #128]	; (8000a14 <MX_GPIO_Init+0x118>)
 8000994:	f001 f870 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_GPIO_Init+0x11c>)
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4819      	ldr	r0, [pc, #100]	; (8000a14 <MX_GPIO_Init+0x118>)
 80009ae:	f000 fee1 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009b2:	2302      	movs	r3, #2
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <MX_GPIO_Init+0x114>)
 80009c6:	f000 fed5 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80009ca:	f44f 7348 	mov.w	r3, #800	; 0x320
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <MX_GPIO_Init+0x114>)
 80009e4:	f000 fec6 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_GPIO_Init+0x118>)
 8000a00:	f000 feb8 	bl	8001774 <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020800 	.word	0x40020800
 8000a18:	10210000 	.word	0x10210000

08000a1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a24:	2120      	movs	r1, #32
 8000a26:	4837      	ldr	r0, [pc, #220]	; (8000b04 <HAL_UART_RxCpltCallback+0xe8>)
 8000a28:	f001 f83f 	bl	8001aaa <HAL_GPIO_TogglePin>
	int cmd;
	sscanf(buffer, "%d", &cmd);
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	461a      	mov	r2, r3
 8000a32:	4935      	ldr	r1, [pc, #212]	; (8000b08 <HAL_UART_RxCpltCallback+0xec>)
 8000a34:	4835      	ldr	r0, [pc, #212]	; (8000b0c <HAL_UART_RxCpltCallback+0xf0>)
 8000a36:	f003 f82d 	bl	8003a94 <siscanf>
	switch(cmd) {
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3b0a      	subs	r3, #10
 8000a3e:	2b15      	cmp	r3, #21
 8000a40:	d856      	bhi.n	8000af0 <HAL_UART_RxCpltCallback+0xd4>
 8000a42:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <HAL_UART_RxCpltCallback+0x2c>)
 8000a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a48:	08000aa1 	.word	0x08000aa1
 8000a4c:	08000aaf 	.word	0x08000aaf
 8000a50:	08000af1 	.word	0x08000af1
 8000a54:	08000af1 	.word	0x08000af1
 8000a58:	08000af1 	.word	0x08000af1
 8000a5c:	08000af1 	.word	0x08000af1
 8000a60:	08000af1 	.word	0x08000af1
 8000a64:	08000af1 	.word	0x08000af1
 8000a68:	08000af1 	.word	0x08000af1
 8000a6c:	08000af1 	.word	0x08000af1
 8000a70:	08000abd 	.word	0x08000abd
 8000a74:	08000acb 	.word	0x08000acb
 8000a78:	08000af1 	.word	0x08000af1
 8000a7c:	08000af1 	.word	0x08000af1
 8000a80:	08000af1 	.word	0x08000af1
 8000a84:	08000af1 	.word	0x08000af1
 8000a88:	08000af1 	.word	0x08000af1
 8000a8c:	08000af1 	.word	0x08000af1
 8000a90:	08000af1 	.word	0x08000af1
 8000a94:	08000af1 	.word	0x08000af1
 8000a98:	08000ae5 	.word	0x08000ae5
 8000a9c:	08000ad9 	.word	0x08000ad9
	case 10:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa6:	4817      	ldr	r0, [pc, #92]	; (8000b04 <HAL_UART_RxCpltCallback+0xe8>)
 8000aa8:	f000 ffe6 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 8000aac:	e020      	b.n	8000af0 <HAL_UART_RxCpltCallback+0xd4>
	case 11:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <HAL_UART_RxCpltCallback+0xe8>)
 8000ab6:	f000 ffdf 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 8000aba:	e019      	b.n	8000af0 <HAL_UART_RxCpltCallback+0xd4>
	case 20:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <HAL_UART_RxCpltCallback+0xe8>)
 8000ac4:	f000 ffd8 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 8000ac8:	e012      	b.n	8000af0 <HAL_UART_RxCpltCallback+0xd4>
	case 21:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <HAL_UART_RxCpltCallback+0xe8>)
 8000ad2:	f000 ffd1 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 8000ad6:	e00b      	b.n	8000af0 <HAL_UART_RxCpltCallback+0xd4>
	case 31:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <HAL_UART_RxCpltCallback+0xf4>)
 8000ade:	f000 ffcb 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 8000ae2:	e005      	b.n	8000af0 <HAL_UART_RxCpltCallback+0xd4>
	case 30:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_UART_RxCpltCallback+0xf4>)
 8000aea:	f000 ffc5 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 8000aee:	bf00      	nop
	}
//	HAL_UART_Transmit(&huart2, &buffer, 2, 12);
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
    HAL_UART_Receive_IT(&huart1, &buffer, 2);
 8000af0:	2202      	movs	r2, #2
 8000af2:	4906      	ldr	r1, [pc, #24]	; (8000b0c <HAL_UART_RxCpltCallback+0xf0>)
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_UART_RxCpltCallback+0xf8>)
 8000af6:	f002 f994 	bl	8002e22 <HAL_UART_Receive_IT>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40020000 	.word	0x40020000
 8000b08:	08004660 	.word	0x08004660
 8000b0c:	2000028c 	.word	0x2000028c
 8000b10:	40020800 	.word	0x40020800
 8000b14:	2000024c 	.word	0x2000024c

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <Error_Handler+0x6>

08000b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5e:	2007      	movs	r0, #7
 8000b60:	f000 fda4 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_ADC_MspInit+0x7c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d127      	bne.n	8000be2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_ADC_MspInit+0x84>)
 8000bde:	f000 fdc9 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40012000 	.word	0x40012000
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c08:	d10d      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_TIM_Base_MspInit+0x3c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_TIM_Base_MspInit+0x3c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_TIM_Base_MspInit+0x3c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d11e      	bne.n	8000c98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_TIM_MspPostInit+0x68>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <HAL_TIM_MspPostInit+0x68>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_TIM_MspPostInit+0x68>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4619      	mov	r1, r3
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <HAL_TIM_MspPostInit+0x6c>)
 8000c94:	f000 fd6e 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a45      	ldr	r2, [pc, #276]	; (8000ddc <HAL_UART_MspInit+0x134>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d153      	bne.n	8000d72 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a43      	ldr	r2, [pc, #268]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a3c      	ldr	r2, [pc, #240]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a35      	ldr	r2, [pc, #212]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d30:	2307      	movs	r3, #7
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	482a      	ldr	r0, [pc, #168]	; (8000de4 <HAL_UART_MspInit+0x13c>)
 8000d3c:	f000 fd1a 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d50:	2307      	movs	r3, #7
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <HAL_UART_MspInit+0x140>)
 8000d5c:	f000 fd0a 	bl	8001774 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2025      	movs	r0, #37	; 0x25
 8000d66:	f000 fcac 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d6a:	2025      	movs	r0, #37	; 0x25
 8000d6c:	f000 fcc5 	bl	80016fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d70:	e030      	b.n	8000dd4 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_UART_MspInit+0x144>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d12b      	bne.n	8000dd4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_UART_MspInit+0x138>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000db4:	230c      	movs	r3, #12
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_UART_MspInit+0x13c>)
 8000dd0:	f000 fcd0 	bl	8001774 <HAL_GPIO_Init>
}
 8000dd4:	bf00      	nop
 8000dd6:	3730      	adds	r7, #48	; 0x30
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40004400 	.word	0x40004400

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8d4 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <USART1_IRQHandler+0x10>)
 8000e4a:	f002 f83f 	bl	8002ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000024c 	.word	0x2000024c

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f002 fdd2 	bl	8003a30 <__errno>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	230c      	movs	r3, #12
 8000e90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20020000 	.word	0x20020000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	200001f8 	.word	0x200001f8
 8000ec0:	20000318 	.word	0x20000318

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <SystemInit+0x28>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <SystemInit+0x28>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SystemInit+0x28>)
 8000eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ede:	609a      	str	r2, [r3, #8]
#endif
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ef4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr  r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd3 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f002 fd8d 	bl	8003a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fb35 	bl	8000590 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f2c:	08004824 	.word	0x08004824
  ldr  r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f34:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000f38:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000f3c:	20000318 	.word	0x20000318

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 fb9d 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fdd2 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fbb5 	bl	8001716 <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 fb7d 	bl	80016c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	20000310 	.word	0x20000310

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000310 	.word	0x20000310

08001028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e033      	b.n	80010a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fd92 	bl	8000b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	d118      	bne.n	8001098 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106e:	f023 0302 	bic.w	r3, r3, #2
 8001072:	f043 0202 	orr.w	r2, r3, #2
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f94a 	bl	8001314 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
 8001096:	e001      	b.n	800109c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x1c>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e113      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x244>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b09      	cmp	r3, #9
 80010da:	d925      	bls.n	8001128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68d9      	ldr	r1, [r3, #12]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	3b1e      	subs	r3, #30
 80010f2:	2207      	movs	r2, #7
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43da      	mvns	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	400a      	ands	r2, r1
 8001100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68d9      	ldr	r1, [r3, #12]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	4603      	mov	r3, r0
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4403      	add	r3, r0
 800111a:	3b1e      	subs	r3, #30
 800111c:	409a      	lsls	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	e022      	b.n	800116e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6919      	ldr	r1, [r3, #16]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	2207      	movs	r2, #7
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	400a      	ands	r2, r1
 800114a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6919      	ldr	r1, [r3, #16]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	4603      	mov	r3, r0
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4403      	add	r3, r0
 8001164:	409a      	lsls	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b06      	cmp	r3, #6
 8001174:	d824      	bhi.n	80011c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b05      	subs	r3, #5
 8001188:	221f      	movs	r2, #31
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	3b05      	subs	r3, #5
 80011b2:	fa00 f203 	lsl.w	r2, r0, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
 80011be:	e04c      	b.n	800125a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b0c      	cmp	r3, #12
 80011c6:	d824      	bhi.n	8001212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	3b23      	subs	r3, #35	; 0x23
 80011da:	221f      	movs	r2, #31
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43da      	mvns	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	400a      	ands	r2, r1
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3b23      	subs	r3, #35	; 0x23
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
 8001210:	e023      	b.n	800125a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3b41      	subs	r3, #65	; 0x41
 8001224:	221f      	movs	r2, #31
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	400a      	ands	r2, r1
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3b41      	subs	r3, #65	; 0x41
 800124e:	fa00 f203 	lsl.w	r2, r0, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_ADC_ConfigChannel+0x250>)
 800125c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <HAL_ADC_ConfigChannel+0x254>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d10f      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x1d8>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_ADC_ConfigChannel+0x254>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12b      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x23a>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <HAL_ADC_ConfigChannel+0x258>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d003      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0x1f4>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b11      	cmp	r3, #17
 80012a2:	d122      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_ADC_ConfigChannel+0x258>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d111      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_ADC_ConfigChannel+0x25c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_ADC_ConfigChannel+0x260>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9a      	lsrs	r2, r3, #18
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012dc:	e002      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40012300 	.word	0x40012300
 8001304:	40012000 	.word	0x40012000
 8001308:	10000012 	.word	0x10000012
 800130c:	20000000 	.word	0x20000000
 8001310:	431bde83 	.word	0x431bde83

08001314 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800131c:	4b79      	ldr	r3, [pc, #484]	; (8001504 <ADC_Init+0x1f0>)
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	431a      	orrs	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	021a      	lsls	r2, r3, #8
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800136c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800138e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	4a58      	ldr	r2, [pc, #352]	; (8001508 <ADC_Init+0x1f4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d022      	beq.n	80013f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6899      	ldr	r1, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6899      	ldr	r1, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	e00f      	b.n	8001412 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001410:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0202 	bic.w	r2, r2, #2
 8001420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6899      	ldr	r1, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e1b      	ldrb	r3, [r3, #24]
 800142c:	005a      	lsls	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d01b      	beq.n	8001478 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800144e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800145e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6859      	ldr	r1, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	3b01      	subs	r3, #1
 800146c:	035a      	lsls	r2, r3, #13
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	e007      	b.n	8001488 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001486:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	051a      	lsls	r2, r3, #20
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ca:	025a      	lsls	r2, r3, #9
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6899      	ldr	r1, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	029a      	lsls	r2, r3, #10
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	609a      	str	r2, [r3, #8]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40012300 	.word	0x40012300
 8001508:	0f000001 	.word	0x0f000001

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4907      	ldr	r1, [pc, #28]	; (80015a8 <__NVIC_EnableIRQ+0x38>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ff8e 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff29 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff3e 	bl	8001554 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff8e 	bl	8001600 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff31 	bl	8001570 <__NVIC_EnableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffa2 	bl	8001668 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d004      	beq.n	800174c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e00c      	b.n	8001766 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2205      	movs	r2, #5
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e159      	b.n	8001a44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8148 	bne.w	8001a3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d00b      	beq.n	80017ce <HAL_GPIO_Init+0x5a>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d007      	beq.n	80017ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c2:	2b11      	cmp	r3, #17
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d130      	bne.n	8001830 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0xfc>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b12      	cmp	r3, #18
 800186e:	d123      	bne.n	80018b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a2 	beq.w	8001a3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a55      	ldr	r2, [pc, #340]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001916:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <HAL_GPIO_Init+0x2ec>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x202>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a47      	ldr	r2, [pc, #284]	; (8001a64 <HAL_GPIO_Init+0x2f0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x1fe>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a46      	ldr	r2, [pc, #280]	; (8001a68 <HAL_GPIO_Init+0x2f4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x1fa>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a45      	ldr	r2, [pc, #276]	; (8001a6c <HAL_GPIO_Init+0x2f8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x1f6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a44      	ldr	r2, [pc, #272]	; (8001a70 <HAL_GPIO_Init+0x2fc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x1f2>
 8001962:	2304      	movs	r3, #4
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001966:	2307      	movs	r3, #7
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x204>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x204>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	4934      	ldr	r1, [pc, #208]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ba:	4a2e      	ldr	r2, [pc, #184]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e4:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f aea2 	bls.w	8001790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3724      	adds	r7, #36	; 0x24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40013800 	.word	0x40013800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40013c00 	.word	0x40013c00

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a94:	e003      	b.n	8001a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	041a      	lsls	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	401a      	ands	r2, r3
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d104      	bne.n	8001ace <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	041a      	lsls	r2, r3, #16
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e25b      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d075      	beq.n	8001bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afe:	4ba3      	ldr	r3, [pc, #652]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d00c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0a:	4ba0      	ldr	r3, [pc, #640]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d112      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b9d      	ldr	r3, [pc, #628]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b22:	d10b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b99      	ldr	r3, [pc, #612]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d05b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d157      	bne.n	8001be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e236      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x74>
 8001b46:	4b91      	ldr	r3, [pc, #580]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a90      	ldr	r2, [pc, #576]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b8b      	ldr	r3, [pc, #556]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a8a      	ldr	r2, [pc, #552]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b88      	ldr	r3, [pc, #544]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a87      	ldr	r2, [pc, #540]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b78:	4b84      	ldr	r3, [pc, #528]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a83      	ldr	r2, [pc, #524]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a80      	ldr	r2, [pc, #512]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fa3a 	bl	8001010 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fa36 	bl	8001010 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1fb      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa26 	bl	8001010 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fa22 	bl	8001010 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1e7      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b6c      	ldr	r3, [pc, #432]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xe8>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1bb      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b56      	ldr	r3, [pc, #344]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4952      	ldr	r1, [pc, #328]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_RCC_OscConfig+0x2b0>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff f9db 	bl	8001010 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff f9d7 	bl	8001010 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e19c      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4940      	ldr	r1, [pc, #256]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0x2b0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f9ba 	bl	8001010 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f9b6 	bl	8001010 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e17b      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d030      	beq.n	8001d2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d016      	beq.n	8001d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_RCC_OscConfig+0x2b4>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f99a 	bl	8001010 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f996 	bl	8001010 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e15b      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x200>
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x2b4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff f983 	bl	8001010 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f97f 	bl	8001010 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e144      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80a0 	beq.w	8001e7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10f      	bne.n	8001d6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_OscConfig+0x2b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d121      	bne.n	8001dba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_RCC_OscConfig+0x2b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_RCC_OscConfig+0x2b8>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f945 	bl	8001010 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	e011      	b.n	8001dae <HAL_RCC_OscConfig+0x2ce>
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	42470000 	.word	0x42470000
 8001d94:	42470e80 	.word	0x42470e80
 8001d98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7ff f938 	bl	8001010 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0fd      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCC_OscConfig+0x4d4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
 8001dc2:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a7c      	ldr	r2, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dce:	e01c      	b.n	8001e0a <HAL_RCC_OscConfig+0x32a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d10c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x312>
 8001dd8:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a76      	ldr	r2, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a73      	ldr	r2, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	e00b      	b.n	8001e0a <HAL_RCC_OscConfig+0x32a>
 8001df2:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a70      	ldr	r2, [pc, #448]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a6d      	ldr	r2, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff f8fd 	bl	8001010 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f8f9 	bl	8001010 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0bc      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ee      	beq.n	8001e1a <HAL_RCC_OscConfig+0x33a>
 8001e3c:	e014      	b.n	8001e68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f8e7 	bl	8001010 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff f8e3 	bl	8001010 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0a6      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a51      	ldr	r2, [pc, #324]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8092 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d05c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d141      	bne.n	8001f1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_RCC_OscConfig+0x4dc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f8b7 	bl	8001010 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff f8b3 	bl	8001010 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e078      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	019b      	lsls	r3, r3, #6
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	3b01      	subs	r3, #1
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
 8001ee8:	4933      	ldr	r1, [pc, #204]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x4dc>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f88c 	bl	8001010 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff f888 	bl	8001010 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e04d      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x41c>
 8001f1a:	e045      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x4dc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff f875 	bl	8001010 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff f871 	bl	8001010 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e036      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x44a>
 8001f48:	e02e      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e029      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_OscConfig+0x4d8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d11c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d115      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f7e:	4013      	ands	r3, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d10d      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	42470060 	.word	0x42470060

08001fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0cc      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b68      	ldr	r3, [pc, #416]	; (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d90c      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b65      	ldr	r3, [pc, #404]	; (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800201e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202c:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	494d      	ldr	r1, [pc, #308]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d044      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d119      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d003      	beq.n	800207e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207a:	2b03      	cmp	r3, #3
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b3f      	ldr	r3, [pc, #252]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e067      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b37      	ldr	r3, [pc, #220]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4934      	ldr	r1, [pc, #208]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b0:	f7fe ffae 	bl	8001010 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7fe ffaa 	bl	8001010 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e04f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d20c      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e032      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4916      	ldr	r1, [pc, #88]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	490e      	ldr	r1, [pc, #56]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002146:	f000 f821 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214a:	4601      	mov	r1, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	fa21 f303 	lsr.w	r3, r1, r3
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ff0e 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00
 800217c:	40023800 	.word	0x40023800
 8002180:	08004670 	.word	0x08004670
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d007      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x32>
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d008      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x38>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 80b4 	bne.w	8002320 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021ba:	60bb      	str	r3, [r7, #8]
       break;
 80021bc:	e0b3      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021be:	4b5e      	ldr	r3, [pc, #376]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021c0:	60bb      	str	r3, [r7, #8]
      break;
 80021c2:	e0b0      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c4:	4b5a      	ldr	r3, [pc, #360]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ce:	4b58      	ldr	r3, [pc, #352]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d04a      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021da:	4b55      	ldr	r3, [pc, #340]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	f04f 0400 	mov.w	r4, #0
 80021e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	ea03 0501 	and.w	r5, r3, r1
 80021f0:	ea04 0602 	and.w	r6, r4, r2
 80021f4:	4629      	mov	r1, r5
 80021f6:	4632      	mov	r2, r6
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f04f 0400 	mov.w	r4, #0
 8002200:	0154      	lsls	r4, r2, #5
 8002202:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002206:	014b      	lsls	r3, r1, #5
 8002208:	4619      	mov	r1, r3
 800220a:	4622      	mov	r2, r4
 800220c:	1b49      	subs	r1, r1, r5
 800220e:	eb62 0206 	sbc.w	r2, r2, r6
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	f04f 0400 	mov.w	r4, #0
 800221a:	0194      	lsls	r4, r2, #6
 800221c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002220:	018b      	lsls	r3, r1, #6
 8002222:	1a5b      	subs	r3, r3, r1
 8002224:	eb64 0402 	sbc.w	r4, r4, r2
 8002228:	f04f 0100 	mov.w	r1, #0
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	00e2      	lsls	r2, r4, #3
 8002232:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002236:	00d9      	lsls	r1, r3, #3
 8002238:	460b      	mov	r3, r1
 800223a:	4614      	mov	r4, r2
 800223c:	195b      	adds	r3, r3, r5
 800223e:	eb44 0406 	adc.w	r4, r4, r6
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	0262      	lsls	r2, r4, #9
 800224c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002250:	0259      	lsls	r1, r3, #9
 8002252:	460b      	mov	r3, r1
 8002254:	4614      	mov	r4, r2
 8002256:	4618      	mov	r0, r3
 8002258:	4621      	mov	r1, r4
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f04f 0400 	mov.w	r4, #0
 8002260:	461a      	mov	r2, r3
 8002262:	4623      	mov	r3, r4
 8002264:	f7fe f814 	bl	8000290 <__aeabi_uldivmod>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e049      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	099b      	lsrs	r3, r3, #6
 8002276:	f04f 0400 	mov.w	r4, #0
 800227a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	ea03 0501 	and.w	r5, r3, r1
 8002286:	ea04 0602 	and.w	r6, r4, r2
 800228a:	4629      	mov	r1, r5
 800228c:	4632      	mov	r2, r6
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	f04f 0400 	mov.w	r4, #0
 8002296:	0154      	lsls	r4, r2, #5
 8002298:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800229c:	014b      	lsls	r3, r1, #5
 800229e:	4619      	mov	r1, r3
 80022a0:	4622      	mov	r2, r4
 80022a2:	1b49      	subs	r1, r1, r5
 80022a4:	eb62 0206 	sbc.w	r2, r2, r6
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	f04f 0400 	mov.w	r4, #0
 80022b0:	0194      	lsls	r4, r2, #6
 80022b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022b6:	018b      	lsls	r3, r1, #6
 80022b8:	1a5b      	subs	r3, r3, r1
 80022ba:	eb64 0402 	sbc.w	r4, r4, r2
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	00e2      	lsls	r2, r4, #3
 80022c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022cc:	00d9      	lsls	r1, r3, #3
 80022ce:	460b      	mov	r3, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	195b      	adds	r3, r3, r5
 80022d4:	eb44 0406 	adc.w	r4, r4, r6
 80022d8:	f04f 0100 	mov.w	r1, #0
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	02a2      	lsls	r2, r4, #10
 80022e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022e6:	0299      	lsls	r1, r3, #10
 80022e8:	460b      	mov	r3, r1
 80022ea:	4614      	mov	r4, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	4621      	mov	r1, r4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f04f 0400 	mov.w	r4, #0
 80022f6:	461a      	mov	r2, r3
 80022f8:	4623      	mov	r3, r4
 80022fa:	f7fd ffc9 	bl	8000290 <__aeabi_uldivmod>
 80022fe:	4603      	mov	r3, r0
 8002300:	460c      	mov	r4, r1
 8002302:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	3301      	adds	r3, #1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	60bb      	str	r3, [r7, #8]
      break;
 800231e:	e002      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002322:	60bb      	str	r3, [r7, #8]
      break;
 8002324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002326:	68bb      	ldr	r3, [r7, #8]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	00f42400 	.word	0x00f42400
 8002338:	007a1200 	.word	0x007a1200

0800233c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_GetHCLKFreq+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002358:	f7ff fff0 	bl	800233c <HAL_RCC_GetHCLKFreq>
 800235c:	4601      	mov	r1, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4a03      	ldr	r2, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	08004680 	.word	0x08004680

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002380:	f7ff ffdc 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002384:	4601      	mov	r1, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0b5b      	lsrs	r3, r3, #13
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	08004680 	.word	0x08004680

080023a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01d      	b.n	80023f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fc14 	bl	8000bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 f9bc 	bl	8002760 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e01d      	b.n	8002448 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f815 	bl	8002450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4610      	mov	r0, r2
 800243a:	f000 f991 	bl	8002760 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800247a:	2302      	movs	r3, #2
 800247c:	e0b4      	b.n	80025e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b0c      	cmp	r3, #12
 8002492:	f200 809f 	bhi.w	80025d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002496:	a201      	add	r2, pc, #4	; (adr r2, 800249c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	080024d1 	.word	0x080024d1
 80024a0:	080025d5 	.word	0x080025d5
 80024a4:	080025d5 	.word	0x080025d5
 80024a8:	080025d5 	.word	0x080025d5
 80024ac:	08002511 	.word	0x08002511
 80024b0:	080025d5 	.word	0x080025d5
 80024b4:	080025d5 	.word	0x080025d5
 80024b8:	080025d5 	.word	0x080025d5
 80024bc:	08002553 	.word	0x08002553
 80024c0:	080025d5 	.word	0x080025d5
 80024c4:	080025d5 	.word	0x080025d5
 80024c8:	080025d5 	.word	0x080025d5
 80024cc:	08002593 	.word	0x08002593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f9c2 	bl	8002860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0208 	orr.w	r2, r2, #8
 80024ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0204 	bic.w	r2, r2, #4
 80024fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6999      	ldr	r1, [r3, #24]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	619a      	str	r2, [r3, #24]
      break;
 800250e:	e062      	b.n	80025d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fa08 	bl	800292c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6999      	ldr	r1, [r3, #24]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	021a      	lsls	r2, r3, #8
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	619a      	str	r2, [r3, #24]
      break;
 8002550:	e041      	b.n	80025d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa53 	bl	8002a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0208 	orr.w	r2, r2, #8
 800256c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0204 	bic.w	r2, r2, #4
 800257c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69d9      	ldr	r1, [r3, #28]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	61da      	str	r2, [r3, #28]
      break;
 8002590:	e021      	b.n	80025d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fa9d 	bl	8002ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69d9      	ldr	r1, [r3, #28]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	021a      	lsls	r2, r3, #8
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	61da      	str	r2, [r3, #28]
      break;
 80025d2:	e000      	b.n	80025d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80025d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_TIM_ConfigClockSource+0x18>
 8002604:	2302      	movs	r3, #2
 8002606:	e0a6      	b.n	8002756 <HAL_TIM_ConfigClockSource+0x166>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d067      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0x120>
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d80b      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x6c>
 8002644:	2b10      	cmp	r3, #16
 8002646:	d073      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x140>
 8002648:	2b10      	cmp	r3, #16
 800264a:	d802      	bhi.n	8002652 <HAL_TIM_ConfigClockSource+0x62>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d06f      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002650:	e078      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002652:	2b20      	cmp	r3, #32
 8002654:	d06c      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x140>
 8002656:	2b30      	cmp	r3, #48	; 0x30
 8002658:	d06a      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800265a:	e073      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800265c:	2b70      	cmp	r3, #112	; 0x70
 800265e:	d00d      	beq.n	800267c <HAL_TIM_ConfigClockSource+0x8c>
 8002660:	2b70      	cmp	r3, #112	; 0x70
 8002662:	d804      	bhi.n	800266e <HAL_TIM_ConfigClockSource+0x7e>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d033      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0xe0>
 8002668:	2b60      	cmp	r3, #96	; 0x60
 800266a:	d041      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800266c:	e06a      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	d066      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x152>
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002678:	d017      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800267a:	e063      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f000 faee 	bl	8002c6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800269e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]
      break;
 80026a8:	e04c      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f000 fad7 	bl	8002c6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026cc:	609a      	str	r2, [r3, #8]
      break;
 80026ce:	e039      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	461a      	mov	r2, r3
 80026de:	f000 fa4b 	bl	8002b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2150      	movs	r1, #80	; 0x50
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 faa4 	bl	8002c36 <TIM_ITRx_SetConfig>
      break;
 80026ee:	e029      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f000 fa6a 	bl	8002bd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2160      	movs	r1, #96	; 0x60
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fa94 	bl	8002c36 <TIM_ITRx_SetConfig>
      break;
 800270e:	e019      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	461a      	mov	r2, r3
 800271e:	f000 fa2b 	bl	8002b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fa84 	bl	8002c36 <TIM_ITRx_SetConfig>
      break;
 800272e:	e009      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f000 fa7b 	bl	8002c36 <TIM_ITRx_SetConfig>
      break;
 8002740:	e000      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a34      	ldr	r2, [pc, #208]	; (8002844 <TIM_Base_SetConfig+0xe4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00f      	beq.n	8002798 <TIM_Base_SetConfig+0x38>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277e:	d00b      	beq.n	8002798 <TIM_Base_SetConfig+0x38>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a31      	ldr	r2, [pc, #196]	; (8002848 <TIM_Base_SetConfig+0xe8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d007      	beq.n	8002798 <TIM_Base_SetConfig+0x38>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a30      	ldr	r2, [pc, #192]	; (800284c <TIM_Base_SetConfig+0xec>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <TIM_Base_SetConfig+0x38>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <TIM_Base_SetConfig+0xf0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a25      	ldr	r2, [pc, #148]	; (8002844 <TIM_Base_SetConfig+0xe4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01b      	beq.n	80027ea <TIM_Base_SetConfig+0x8a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b8:	d017      	beq.n	80027ea <TIM_Base_SetConfig+0x8a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <TIM_Base_SetConfig+0xe8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <TIM_Base_SetConfig+0x8a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a21      	ldr	r2, [pc, #132]	; (800284c <TIM_Base_SetConfig+0xec>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00f      	beq.n	80027ea <TIM_Base_SetConfig+0x8a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a20      	ldr	r2, [pc, #128]	; (8002850 <TIM_Base_SetConfig+0xf0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00b      	beq.n	80027ea <TIM_Base_SetConfig+0x8a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <TIM_Base_SetConfig+0xf4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <TIM_Base_SetConfig+0x8a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <TIM_Base_SetConfig+0xf8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_Base_SetConfig+0x8a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	; (800285c <TIM_Base_SetConfig+0xfc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d108      	bne.n	80027fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <TIM_Base_SetConfig+0xe4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	615a      	str	r2, [r3, #20]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010000 	.word	0x40010000
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800
 8002850:	40000c00 	.word	0x40000c00
 8002854:	40014000 	.word	0x40014000
 8002858:	40014400 	.word	0x40014400
 800285c:	40014800 	.word	0x40014800

08002860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0201 	bic.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 0302 	bic.w	r3, r3, #2
 80028a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <TIM_OC1_SetConfig+0xc8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10c      	bne.n	80028d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f023 0308 	bic.w	r3, r3, #8
 80028c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <TIM_OC1_SetConfig+0xc8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d111      	bne.n	8002902 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	621a      	str	r2, [r3, #32]
}
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40010000 	.word	0x40010000

0800292c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 0210 	bic.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0320 	bic.w	r3, r3, #32
 8002976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <TIM_OC2_SetConfig+0xd4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10d      	bne.n	80029a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <TIM_OC2_SetConfig+0xd4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d113      	bne.n	80029d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000

08002a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <TIM_OC3_SetConfig+0xd0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10d      	bne.n	8002a7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <TIM_OC3_SetConfig+0xd0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d113      	bne.n	8002aae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40010000 	.word	0x40010000

08002ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	031b      	lsls	r3, r3, #12
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <TIM_OC4_SetConfig+0x9c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d109      	bne.n	8002b4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000

08002b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f023 0201 	bic.w	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f023 030a 	bic.w	r3, r3, #10
 8002bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b087      	sub	sp, #28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f023 0210 	bic.w	r2, r3, #16
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	031b      	lsls	r3, r3, #12
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b085      	sub	sp, #20
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f043 0307 	orr.w	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	609a      	str	r2, [r3, #8]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	021a      	lsls	r2, r3, #8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e050      	b.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d018      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d013      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00e      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d009      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d004      	beq.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10c      	bne.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40014000 	.word	0x40014000

08002d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e03f      	b.n	8002e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd ff7a 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fab3 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d140      	bne.n	8002ebe <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Receive_IT+0x26>
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e039      	b.n	8002ec0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Receive_IT+0x38>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e032      	b.n	8002ec0 <HAL_UART_Receive_IT+0x9e>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2222      	movs	r2, #34	; 0x22
 8002e7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e98:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_UART_IRQHandler+0x52>
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f98c 	bl	8003234 <UART_Receive_IT>
      return;
 8002f1c:	e0d1      	b.n	80030c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80b0 	beq.w	8003086 <HAL_UART_IRQHandler+0x1ba>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_UART_IRQHandler+0x70>
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80a5 	beq.w	8003086 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_UART_IRQHandler+0x90>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_UART_IRQHandler+0xb0>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	f043 0202 	orr.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_UART_IRQHandler+0xd0>
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00f      	beq.n	8002fc6 <HAL_UART_IRQHandler+0xfa>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d104      	bne.n	8002fba <HAL_UART_IRQHandler+0xee>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	f043 0208 	orr.w	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d078      	beq.n	80030c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x11c>
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f926 	bl	8003234 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_UART_IRQHandler+0x144>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d031      	beq.n	8003074 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f86f 	bl	80030f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d123      	bne.n	800306c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003032:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <HAL_UART_IRQHandler+0x1fc>)
 8003042:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fb70 	bl	800172e <HAL_DMA_Abort_IT>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d016      	beq.n	8003082 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800305e:	4610      	mov	r0, r2
 8003060:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003062:	e00e      	b.n	8003082 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f83b 	bl	80030e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800306a:	e00a      	b.n	8003082 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f837 	bl	80030e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003072:	e006      	b.n	8003082 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f833 	bl	80030e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003080:	e01e      	b.n	80030c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003082:	bf00      	nop
    return;
 8003084:	e01c      	b.n	80030c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_UART_IRQHandler+0x1d6>
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f85c 	bl	8003158 <UART_Transmit_IT>
    return;
 80030a0:	e00f      	b.n	80030c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_UART_IRQHandler+0x1f6>
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f8a4 	bl	8003204 <UART_EndTransmit_IT>
    return;
 80030bc:	bf00      	nop
 80030be:	e000      	b.n	80030c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80030c0:	bf00      	nop
  }
}
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	08003131 	.word	0x08003131

080030cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800310a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7ff ffc8 	bl	80030e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b21      	cmp	r3, #33	; 0x21
 800316a:	d144      	bne.n	80031f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003174:	d11a      	bne.n	80031ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800318a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	1c9a      	adds	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]
 800319e:	e00e      	b.n	80031be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	621a      	str	r2, [r3, #32]
 80031aa:	e008      	b.n	80031be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6211      	str	r1, [r2, #32]
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4619      	mov	r1, r3
 80031cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff51 	bl	80030cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b22      	cmp	r3, #34	; 0x22
 8003246:	d171      	bne.n	800332c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003250:	d123      	bne.n	800329a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10e      	bne.n	800327e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	1c9a      	adds	r2, r3, #2
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
 800327c:	e029      	b.n	80032d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	b29b      	uxth	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
 8003298:	e01b      	b.n	80032d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6858      	ldr	r0, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	1c59      	adds	r1, r3, #1
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6291      	str	r1, [r2, #40]	; 0x28
 80032b2:	b2c2      	uxtb	r2, r0
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e00c      	b.n	80032d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	1c58      	adds	r0, r3, #1
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	6288      	str	r0, [r1, #40]	; 0x28
 80032ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29b      	uxth	r3, r3
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4619      	mov	r1, r3
 80032e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d120      	bne.n	8003328 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0220 	bic.w	r2, r2, #32
 80032f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fb7c 	bl	8000a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e002      	b.n	800332e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800337a:	f023 030c 	bic.w	r3, r3, #12
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	430b      	orrs	r3, r1
 8003386:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a6:	f040 818b 	bne.w	80036c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4ac1      	ldr	r2, [pc, #772]	; (80036b4 <UART_SetConfig+0x37c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d005      	beq.n	80033c0 <UART_SetConfig+0x88>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4abf      	ldr	r2, [pc, #764]	; (80036b8 <UART_SetConfig+0x380>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f040 80bd 	bne.w	800353a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7fe ffdc 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 80033c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	461d      	mov	r5, r3
 80033ca:	f04f 0600 	mov.w	r6, #0
 80033ce:	46a8      	mov	r8, r5
 80033d0:	46b1      	mov	r9, r6
 80033d2:	eb18 0308 	adds.w	r3, r8, r8
 80033d6:	eb49 0409 	adc.w	r4, r9, r9
 80033da:	4698      	mov	r8, r3
 80033dc:	46a1      	mov	r9, r4
 80033de:	eb18 0805 	adds.w	r8, r8, r5
 80033e2:	eb49 0906 	adc.w	r9, r9, r6
 80033e6:	f04f 0100 	mov.w	r1, #0
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033fa:	4688      	mov	r8, r1
 80033fc:	4691      	mov	r9, r2
 80033fe:	eb18 0005 	adds.w	r0, r8, r5
 8003402:	eb49 0106 	adc.w	r1, r9, r6
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	461d      	mov	r5, r3
 800340c:	f04f 0600 	mov.w	r6, #0
 8003410:	196b      	adds	r3, r5, r5
 8003412:	eb46 0406 	adc.w	r4, r6, r6
 8003416:	461a      	mov	r2, r3
 8003418:	4623      	mov	r3, r4
 800341a:	f7fc ff39 	bl	8000290 <__aeabi_uldivmod>
 800341e:	4603      	mov	r3, r0
 8003420:	460c      	mov	r4, r1
 8003422:	461a      	mov	r2, r3
 8003424:	4ba5      	ldr	r3, [pc, #660]	; (80036bc <UART_SetConfig+0x384>)
 8003426:	fba3 2302 	umull	r2, r3, r3, r2
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	461d      	mov	r5, r3
 8003434:	f04f 0600 	mov.w	r6, #0
 8003438:	46a9      	mov	r9, r5
 800343a:	46b2      	mov	sl, r6
 800343c:	eb19 0309 	adds.w	r3, r9, r9
 8003440:	eb4a 040a 	adc.w	r4, sl, sl
 8003444:	4699      	mov	r9, r3
 8003446:	46a2      	mov	sl, r4
 8003448:	eb19 0905 	adds.w	r9, r9, r5
 800344c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800345c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003464:	4689      	mov	r9, r1
 8003466:	4692      	mov	sl, r2
 8003468:	eb19 0005 	adds.w	r0, r9, r5
 800346c:	eb4a 0106 	adc.w	r1, sl, r6
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	461d      	mov	r5, r3
 8003476:	f04f 0600 	mov.w	r6, #0
 800347a:	196b      	adds	r3, r5, r5
 800347c:	eb46 0406 	adc.w	r4, r6, r6
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	f7fc ff04 	bl	8000290 <__aeabi_uldivmod>
 8003488:	4603      	mov	r3, r0
 800348a:	460c      	mov	r4, r1
 800348c:	461a      	mov	r2, r3
 800348e:	4b8b      	ldr	r3, [pc, #556]	; (80036bc <UART_SetConfig+0x384>)
 8003490:	fba3 1302 	umull	r1, r3, r3, r2
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	2164      	movs	r1, #100	; 0x64
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	3332      	adds	r3, #50	; 0x32
 80034a2:	4a86      	ldr	r2, [pc, #536]	; (80036bc <UART_SetConfig+0x384>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b0:	4498      	add	r8, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	461d      	mov	r5, r3
 80034b6:	f04f 0600 	mov.w	r6, #0
 80034ba:	46a9      	mov	r9, r5
 80034bc:	46b2      	mov	sl, r6
 80034be:	eb19 0309 	adds.w	r3, r9, r9
 80034c2:	eb4a 040a 	adc.w	r4, sl, sl
 80034c6:	4699      	mov	r9, r3
 80034c8:	46a2      	mov	sl, r4
 80034ca:	eb19 0905 	adds.w	r9, r9, r5
 80034ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80034d2:	f04f 0100 	mov.w	r1, #0
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e6:	4689      	mov	r9, r1
 80034e8:	4692      	mov	sl, r2
 80034ea:	eb19 0005 	adds.w	r0, r9, r5
 80034ee:	eb4a 0106 	adc.w	r1, sl, r6
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	461d      	mov	r5, r3
 80034f8:	f04f 0600 	mov.w	r6, #0
 80034fc:	196b      	adds	r3, r5, r5
 80034fe:	eb46 0406 	adc.w	r4, r6, r6
 8003502:	461a      	mov	r2, r3
 8003504:	4623      	mov	r3, r4
 8003506:	f7fc fec3 	bl	8000290 <__aeabi_uldivmod>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	461a      	mov	r2, r3
 8003510:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <UART_SetConfig+0x384>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2164      	movs	r1, #100	; 0x64
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a65      	ldr	r2, [pc, #404]	; (80036bc <UART_SetConfig+0x384>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 0207 	and.w	r2, r3, #7
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4442      	add	r2, r8
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	e26f      	b.n	8003a1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800353a:	f7fe ff0b 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 800353e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	461d      	mov	r5, r3
 8003544:	f04f 0600 	mov.w	r6, #0
 8003548:	46a8      	mov	r8, r5
 800354a:	46b1      	mov	r9, r6
 800354c:	eb18 0308 	adds.w	r3, r8, r8
 8003550:	eb49 0409 	adc.w	r4, r9, r9
 8003554:	4698      	mov	r8, r3
 8003556:	46a1      	mov	r9, r4
 8003558:	eb18 0805 	adds.w	r8, r8, r5
 800355c:	eb49 0906 	adc.w	r9, r9, r6
 8003560:	f04f 0100 	mov.w	r1, #0
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800356c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003570:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003574:	4688      	mov	r8, r1
 8003576:	4691      	mov	r9, r2
 8003578:	eb18 0005 	adds.w	r0, r8, r5
 800357c:	eb49 0106 	adc.w	r1, r9, r6
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	461d      	mov	r5, r3
 8003586:	f04f 0600 	mov.w	r6, #0
 800358a:	196b      	adds	r3, r5, r5
 800358c:	eb46 0406 	adc.w	r4, r6, r6
 8003590:	461a      	mov	r2, r3
 8003592:	4623      	mov	r3, r4
 8003594:	f7fc fe7c 	bl	8000290 <__aeabi_uldivmod>
 8003598:	4603      	mov	r3, r0
 800359a:	460c      	mov	r4, r1
 800359c:	461a      	mov	r2, r3
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <UART_SetConfig+0x384>)
 80035a0:	fba3 2302 	umull	r2, r3, r3, r2
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	461d      	mov	r5, r3
 80035ae:	f04f 0600 	mov.w	r6, #0
 80035b2:	46a9      	mov	r9, r5
 80035b4:	46b2      	mov	sl, r6
 80035b6:	eb19 0309 	adds.w	r3, r9, r9
 80035ba:	eb4a 040a 	adc.w	r4, sl, sl
 80035be:	4699      	mov	r9, r3
 80035c0:	46a2      	mov	sl, r4
 80035c2:	eb19 0905 	adds.w	r9, r9, r5
 80035c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035de:	4689      	mov	r9, r1
 80035e0:	4692      	mov	sl, r2
 80035e2:	eb19 0005 	adds.w	r0, r9, r5
 80035e6:	eb4a 0106 	adc.w	r1, sl, r6
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	461d      	mov	r5, r3
 80035f0:	f04f 0600 	mov.w	r6, #0
 80035f4:	196b      	adds	r3, r5, r5
 80035f6:	eb46 0406 	adc.w	r4, r6, r6
 80035fa:	461a      	mov	r2, r3
 80035fc:	4623      	mov	r3, r4
 80035fe:	f7fc fe47 	bl	8000290 <__aeabi_uldivmod>
 8003602:	4603      	mov	r3, r0
 8003604:	460c      	mov	r4, r1
 8003606:	461a      	mov	r2, r3
 8003608:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <UART_SetConfig+0x384>)
 800360a:	fba3 1302 	umull	r1, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2164      	movs	r1, #100	; 0x64
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	3332      	adds	r3, #50	; 0x32
 800361c:	4a27      	ldr	r2, [pc, #156]	; (80036bc <UART_SetConfig+0x384>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800362a:	4498      	add	r8, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	461d      	mov	r5, r3
 8003630:	f04f 0600 	mov.w	r6, #0
 8003634:	46a9      	mov	r9, r5
 8003636:	46b2      	mov	sl, r6
 8003638:	eb19 0309 	adds.w	r3, r9, r9
 800363c:	eb4a 040a 	adc.w	r4, sl, sl
 8003640:	4699      	mov	r9, r3
 8003642:	46a2      	mov	sl, r4
 8003644:	eb19 0905 	adds.w	r9, r9, r5
 8003648:	eb4a 0a06 	adc.w	sl, sl, r6
 800364c:	f04f 0100 	mov.w	r1, #0
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003658:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800365c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003660:	4689      	mov	r9, r1
 8003662:	4692      	mov	sl, r2
 8003664:	eb19 0005 	adds.w	r0, r9, r5
 8003668:	eb4a 0106 	adc.w	r1, sl, r6
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	461d      	mov	r5, r3
 8003672:	f04f 0600 	mov.w	r6, #0
 8003676:	196b      	adds	r3, r5, r5
 8003678:	eb46 0406 	adc.w	r4, r6, r6
 800367c:	461a      	mov	r2, r3
 800367e:	4623      	mov	r3, r4
 8003680:	f7fc fe06 	bl	8000290 <__aeabi_uldivmod>
 8003684:	4603      	mov	r3, r0
 8003686:	460c      	mov	r4, r1
 8003688:	461a      	mov	r2, r3
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <UART_SetConfig+0x384>)
 800368c:	fba3 1302 	umull	r1, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	2164      	movs	r1, #100	; 0x64
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	3332      	adds	r3, #50	; 0x32
 800369e:	4a07      	ldr	r2, [pc, #28]	; (80036bc <UART_SetConfig+0x384>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	f003 0207 	and.w	r2, r3, #7
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4442      	add	r2, r8
 80036b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80036b2:	e1b2      	b.n	8003a1a <UART_SetConfig+0x6e2>
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40011400 	.word	0x40011400
 80036bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4ad7      	ldr	r2, [pc, #860]	; (8003a24 <UART_SetConfig+0x6ec>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d005      	beq.n	80036d6 <UART_SetConfig+0x39e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4ad6      	ldr	r2, [pc, #856]	; (8003a28 <UART_SetConfig+0x6f0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	f040 80d1 	bne.w	8003878 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d6:	f7fe fe51 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 80036da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	469a      	mov	sl, r3
 80036e0:	f04f 0b00 	mov.w	fp, #0
 80036e4:	46d0      	mov	r8, sl
 80036e6:	46d9      	mov	r9, fp
 80036e8:	eb18 0308 	adds.w	r3, r8, r8
 80036ec:	eb49 0409 	adc.w	r4, r9, r9
 80036f0:	4698      	mov	r8, r3
 80036f2:	46a1      	mov	r9, r4
 80036f4:	eb18 080a 	adds.w	r8, r8, sl
 80036f8:	eb49 090b 	adc.w	r9, r9, fp
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003708:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800370c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003710:	4688      	mov	r8, r1
 8003712:	4691      	mov	r9, r2
 8003714:	eb1a 0508 	adds.w	r5, sl, r8
 8003718:	eb4b 0609 	adc.w	r6, fp, r9
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4619      	mov	r1, r3
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	0094      	lsls	r4, r2, #2
 8003730:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003734:	008b      	lsls	r3, r1, #2
 8003736:	461a      	mov	r2, r3
 8003738:	4623      	mov	r3, r4
 800373a:	4628      	mov	r0, r5
 800373c:	4631      	mov	r1, r6
 800373e:	f7fc fda7 	bl	8000290 <__aeabi_uldivmod>
 8003742:	4603      	mov	r3, r0
 8003744:	460c      	mov	r4, r1
 8003746:	461a      	mov	r2, r3
 8003748:	4bb8      	ldr	r3, [pc, #736]	; (8003a2c <UART_SetConfig+0x6f4>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	469b      	mov	fp, r3
 8003758:	f04f 0c00 	mov.w	ip, #0
 800375c:	46d9      	mov	r9, fp
 800375e:	46e2      	mov	sl, ip
 8003760:	eb19 0309 	adds.w	r3, r9, r9
 8003764:	eb4a 040a 	adc.w	r4, sl, sl
 8003768:	4699      	mov	r9, r3
 800376a:	46a2      	mov	sl, r4
 800376c:	eb19 090b 	adds.w	r9, r9, fp
 8003770:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003780:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003784:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003788:	4689      	mov	r9, r1
 800378a:	4692      	mov	sl, r2
 800378c:	eb1b 0509 	adds.w	r5, fp, r9
 8003790:	eb4c 060a 	adc.w	r6, ip, sl
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4619      	mov	r1, r3
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	f04f 0400 	mov.w	r4, #0
 80037a6:	0094      	lsls	r4, r2, #2
 80037a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ac:	008b      	lsls	r3, r1, #2
 80037ae:	461a      	mov	r2, r3
 80037b0:	4623      	mov	r3, r4
 80037b2:	4628      	mov	r0, r5
 80037b4:	4631      	mov	r1, r6
 80037b6:	f7fc fd6b 	bl	8000290 <__aeabi_uldivmod>
 80037ba:	4603      	mov	r3, r0
 80037bc:	460c      	mov	r4, r1
 80037be:	461a      	mov	r2, r3
 80037c0:	4b9a      	ldr	r3, [pc, #616]	; (8003a2c <UART_SetConfig+0x6f4>)
 80037c2:	fba3 1302 	umull	r1, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2164      	movs	r1, #100	; 0x64
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	3332      	adds	r3, #50	; 0x32
 80037d4:	4a95      	ldr	r2, [pc, #596]	; (8003a2c <UART_SetConfig+0x6f4>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e0:	4498      	add	r8, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	469b      	mov	fp, r3
 80037e6:	f04f 0c00 	mov.w	ip, #0
 80037ea:	46d9      	mov	r9, fp
 80037ec:	46e2      	mov	sl, ip
 80037ee:	eb19 0309 	adds.w	r3, r9, r9
 80037f2:	eb4a 040a 	adc.w	r4, sl, sl
 80037f6:	4699      	mov	r9, r3
 80037f8:	46a2      	mov	sl, r4
 80037fa:	eb19 090b 	adds.w	r9, r9, fp
 80037fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800380e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003816:	4689      	mov	r9, r1
 8003818:	4692      	mov	sl, r2
 800381a:	eb1b 0509 	adds.w	r5, fp, r9
 800381e:	eb4c 060a 	adc.w	r6, ip, sl
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4619      	mov	r1, r3
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f04f 0400 	mov.w	r4, #0
 8003834:	0094      	lsls	r4, r2, #2
 8003836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800383a:	008b      	lsls	r3, r1, #2
 800383c:	461a      	mov	r2, r3
 800383e:	4623      	mov	r3, r4
 8003840:	4628      	mov	r0, r5
 8003842:	4631      	mov	r1, r6
 8003844:	f7fc fd24 	bl	8000290 <__aeabi_uldivmod>
 8003848:	4603      	mov	r3, r0
 800384a:	460c      	mov	r4, r1
 800384c:	461a      	mov	r2, r3
 800384e:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003850:	fba3 1302 	umull	r1, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	2164      	movs	r1, #100	; 0x64
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	3332      	adds	r3, #50	; 0x32
 8003862:	4a72      	ldr	r2, [pc, #456]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	f003 020f 	and.w	r2, r3, #15
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4442      	add	r2, r8
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	e0d0      	b.n	8003a1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7fe fd6c 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 800387c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	469a      	mov	sl, r3
 8003882:	f04f 0b00 	mov.w	fp, #0
 8003886:	46d0      	mov	r8, sl
 8003888:	46d9      	mov	r9, fp
 800388a:	eb18 0308 	adds.w	r3, r8, r8
 800388e:	eb49 0409 	adc.w	r4, r9, r9
 8003892:	4698      	mov	r8, r3
 8003894:	46a1      	mov	r9, r4
 8003896:	eb18 080a 	adds.w	r8, r8, sl
 800389a:	eb49 090b 	adc.w	r9, r9, fp
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038b2:	4688      	mov	r8, r1
 80038b4:	4691      	mov	r9, r2
 80038b6:	eb1a 0508 	adds.w	r5, sl, r8
 80038ba:	eb4b 0609 	adc.w	r6, fp, r9
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4619      	mov	r1, r3
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	f04f 0400 	mov.w	r4, #0
 80038d0:	0094      	lsls	r4, r2, #2
 80038d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	461a      	mov	r2, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	4628      	mov	r0, r5
 80038de:	4631      	mov	r1, r6
 80038e0:	f7fc fcd6 	bl	8000290 <__aeabi_uldivmod>
 80038e4:	4603      	mov	r3, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <UART_SetConfig+0x6f4>)
 80038ec:	fba3 2302 	umull	r2, r3, r3, r2
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	469b      	mov	fp, r3
 80038fa:	f04f 0c00 	mov.w	ip, #0
 80038fe:	46d9      	mov	r9, fp
 8003900:	46e2      	mov	sl, ip
 8003902:	eb19 0309 	adds.w	r3, r9, r9
 8003906:	eb4a 040a 	adc.w	r4, sl, sl
 800390a:	4699      	mov	r9, r3
 800390c:	46a2      	mov	sl, r4
 800390e:	eb19 090b 	adds.w	r9, r9, fp
 8003912:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800392a:	4689      	mov	r9, r1
 800392c:	4692      	mov	sl, r2
 800392e:	eb1b 0509 	adds.w	r5, fp, r9
 8003932:	eb4c 060a 	adc.w	r6, ip, sl
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4619      	mov	r1, r3
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	f04f 0400 	mov.w	r4, #0
 8003948:	0094      	lsls	r4, r2, #2
 800394a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800394e:	008b      	lsls	r3, r1, #2
 8003950:	461a      	mov	r2, r3
 8003952:	4623      	mov	r3, r4
 8003954:	4628      	mov	r0, r5
 8003956:	4631      	mov	r1, r6
 8003958:	f7fc fc9a 	bl	8000290 <__aeabi_uldivmod>
 800395c:	4603      	mov	r3, r0
 800395e:	460c      	mov	r4, r1
 8003960:	461a      	mov	r2, r3
 8003962:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003964:	fba3 1302 	umull	r1, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	2164      	movs	r1, #100	; 0x64
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	3332      	adds	r3, #50	; 0x32
 8003976:	4a2d      	ldr	r2, [pc, #180]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003982:	4498      	add	r8, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	469b      	mov	fp, r3
 8003988:	f04f 0c00 	mov.w	ip, #0
 800398c:	46d9      	mov	r9, fp
 800398e:	46e2      	mov	sl, ip
 8003990:	eb19 0309 	adds.w	r3, r9, r9
 8003994:	eb4a 040a 	adc.w	r4, sl, sl
 8003998:	4699      	mov	r9, r3
 800399a:	46a2      	mov	sl, r4
 800399c:	eb19 090b 	adds.w	r9, r9, fp
 80039a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039b8:	4689      	mov	r9, r1
 80039ba:	4692      	mov	sl, r2
 80039bc:	eb1b 0509 	adds.w	r5, fp, r9
 80039c0:	eb4c 060a 	adc.w	r6, ip, sl
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4619      	mov	r1, r3
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	0094      	lsls	r4, r2, #2
 80039d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039dc:	008b      	lsls	r3, r1, #2
 80039de:	461a      	mov	r2, r3
 80039e0:	4623      	mov	r3, r4
 80039e2:	4628      	mov	r0, r5
 80039e4:	4631      	mov	r1, r6
 80039e6:	f7fc fc53 	bl	8000290 <__aeabi_uldivmod>
 80039ea:	4603      	mov	r3, r0
 80039ec:	460c      	mov	r4, r1
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <UART_SetConfig+0x6f4>)
 80039f2:	fba3 1302 	umull	r1, r3, r3, r2
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2164      	movs	r1, #100	; 0x64
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	3332      	adds	r3, #50	; 0x32
 8003a04:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <UART_SetConfig+0x6f4>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4442      	add	r2, r8
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	e7ff      	b.n	8003a1a <UART_SetConfig+0x6e2>
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a24:	40011000 	.word	0x40011000
 8003a28:	40011400 	.word	0x40011400
 8003a2c:	51eb851f 	.word	0x51eb851f

08003a30 <__errno>:
 8003a30:	4b01      	ldr	r3, [pc, #4]	; (8003a38 <__errno+0x8>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	2000000c 	.word	0x2000000c

08003a3c <__libc_init_array>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	4e0d      	ldr	r6, [pc, #52]	; (8003a74 <__libc_init_array+0x38>)
 8003a40:	4c0d      	ldr	r4, [pc, #52]	; (8003a78 <__libc_init_array+0x3c>)
 8003a42:	1ba4      	subs	r4, r4, r6
 8003a44:	10a4      	asrs	r4, r4, #2
 8003a46:	2500      	movs	r5, #0
 8003a48:	42a5      	cmp	r5, r4
 8003a4a:	d109      	bne.n	8003a60 <__libc_init_array+0x24>
 8003a4c:	4e0b      	ldr	r6, [pc, #44]	; (8003a7c <__libc_init_array+0x40>)
 8003a4e:	4c0c      	ldr	r4, [pc, #48]	; (8003a80 <__libc_init_array+0x44>)
 8003a50:	f000 fdfa 	bl	8004648 <_init>
 8003a54:	1ba4      	subs	r4, r4, r6
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	2500      	movs	r5, #0
 8003a5a:	42a5      	cmp	r5, r4
 8003a5c:	d105      	bne.n	8003a6a <__libc_init_array+0x2e>
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a64:	4798      	blx	r3
 8003a66:	3501      	adds	r5, #1
 8003a68:	e7ee      	b.n	8003a48 <__libc_init_array+0xc>
 8003a6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a6e:	4798      	blx	r3
 8003a70:	3501      	adds	r5, #1
 8003a72:	e7f2      	b.n	8003a5a <__libc_init_array+0x1e>
 8003a74:	0800481c 	.word	0x0800481c
 8003a78:	0800481c 	.word	0x0800481c
 8003a7c:	0800481c 	.word	0x0800481c
 8003a80:	08004820 	.word	0x08004820

08003a84 <memset>:
 8003a84:	4402      	add	r2, r0
 8003a86:	4603      	mov	r3, r0
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d100      	bne.n	8003a8e <memset+0xa>
 8003a8c:	4770      	bx	lr
 8003a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a92:	e7f9      	b.n	8003a88 <memset+0x4>

08003a94 <siscanf>:
 8003a94:	b40e      	push	{r1, r2, r3}
 8003a96:	b530      	push	{r4, r5, lr}
 8003a98:	b09c      	sub	sp, #112	; 0x70
 8003a9a:	ac1f      	add	r4, sp, #124	; 0x7c
 8003a9c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003aa0:	f854 5b04 	ldr.w	r5, [r4], #4
 8003aa4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003aa8:	9002      	str	r0, [sp, #8]
 8003aaa:	9006      	str	r0, [sp, #24]
 8003aac:	f7fc fb98 	bl	80001e0 <strlen>
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <siscanf+0x4c>)
 8003ab2:	9003      	str	r0, [sp, #12]
 8003ab4:	9007      	str	r0, [sp, #28]
 8003ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ab8:	480a      	ldr	r0, [pc, #40]	; (8003ae4 <siscanf+0x50>)
 8003aba:	9401      	str	r4, [sp, #4]
 8003abc:	2300      	movs	r3, #0
 8003abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ac0:	9314      	str	r3, [sp, #80]	; 0x50
 8003ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ac6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003aca:	462a      	mov	r2, r5
 8003acc:	4623      	mov	r3, r4
 8003ace:	a902      	add	r1, sp, #8
 8003ad0:	6800      	ldr	r0, [r0, #0]
 8003ad2:	f000 f865 	bl	8003ba0 <__ssvfiscanf_r>
 8003ad6:	b01c      	add	sp, #112	; 0x70
 8003ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003adc:	b003      	add	sp, #12
 8003ade:	4770      	bx	lr
 8003ae0:	08003ae9 	.word	0x08003ae9
 8003ae4:	2000000c 	.word	0x2000000c

08003ae8 <__seofread>:
 8003ae8:	2000      	movs	r0, #0
 8003aea:	4770      	bx	lr

08003aec <_sungetc_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	1c4b      	adds	r3, r1, #1
 8003af0:	4614      	mov	r4, r2
 8003af2:	d103      	bne.n	8003afc <_sungetc_r+0x10>
 8003af4:	f04f 35ff 	mov.w	r5, #4294967295
 8003af8:	4628      	mov	r0, r5
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	8993      	ldrh	r3, [r2, #12]
 8003afe:	f023 0320 	bic.w	r3, r3, #32
 8003b02:	8193      	strh	r3, [r2, #12]
 8003b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b06:	6852      	ldr	r2, [r2, #4]
 8003b08:	b2cd      	uxtb	r5, r1
 8003b0a:	b18b      	cbz	r3, 8003b30 <_sungetc_r+0x44>
 8003b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	dd08      	ble.n	8003b24 <_sungetc_r+0x38>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	1e5a      	subs	r2, r3, #1
 8003b16:	6022      	str	r2, [r4, #0]
 8003b18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	6063      	str	r3, [r4, #4]
 8003b22:	e7e9      	b.n	8003af8 <_sungetc_r+0xc>
 8003b24:	4621      	mov	r1, r4
 8003b26:	f000 fc2f 	bl	8004388 <__submore>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d0f1      	beq.n	8003b12 <_sungetc_r+0x26>
 8003b2e:	e7e1      	b.n	8003af4 <_sungetc_r+0x8>
 8003b30:	6921      	ldr	r1, [r4, #16]
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	b151      	cbz	r1, 8003b4c <_sungetc_r+0x60>
 8003b36:	4299      	cmp	r1, r3
 8003b38:	d208      	bcs.n	8003b4c <_sungetc_r+0x60>
 8003b3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003b3e:	42a9      	cmp	r1, r5
 8003b40:	d104      	bne.n	8003b4c <_sungetc_r+0x60>
 8003b42:	3b01      	subs	r3, #1
 8003b44:	3201      	adds	r2, #1
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	6062      	str	r2, [r4, #4]
 8003b4a:	e7d5      	b.n	8003af8 <_sungetc_r+0xc>
 8003b4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b54:	6363      	str	r3, [r4, #52]	; 0x34
 8003b56:	2303      	movs	r3, #3
 8003b58:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	2301      	movs	r3, #1
 8003b64:	e7dc      	b.n	8003b20 <_sungetc_r+0x34>

08003b66 <__ssrefill_r>:
 8003b66:	b510      	push	{r4, lr}
 8003b68:	460c      	mov	r4, r1
 8003b6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003b6c:	b169      	cbz	r1, 8003b8a <__ssrefill_r+0x24>
 8003b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b72:	4299      	cmp	r1, r3
 8003b74:	d001      	beq.n	8003b7a <__ssrefill_r+0x14>
 8003b76:	f000 fc71 	bl	800445c <_free_r>
 8003b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	2000      	movs	r0, #0
 8003b80:	6360      	str	r0, [r4, #52]	; 0x34
 8003b82:	b113      	cbz	r3, 8003b8a <__ssrefill_r+0x24>
 8003b84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b86:	6023      	str	r3, [r4, #0]
 8003b88:	bd10      	pop	{r4, pc}
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6063      	str	r3, [r4, #4]
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	f043 0320 	orr.w	r3, r3, #32
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9e:	e7f3      	b.n	8003b88 <__ssrefill_r+0x22>

08003ba0 <__ssvfiscanf_r>:
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003ba8:	460c      	mov	r4, r1
 8003baa:	2100      	movs	r1, #0
 8003bac:	9144      	str	r1, [sp, #272]	; 0x110
 8003bae:	9145      	str	r1, [sp, #276]	; 0x114
 8003bb0:	499f      	ldr	r1, [pc, #636]	; (8003e30 <__ssvfiscanf_r+0x290>)
 8003bb2:	91a0      	str	r1, [sp, #640]	; 0x280
 8003bb4:	f10d 0804 	add.w	r8, sp, #4
 8003bb8:	499e      	ldr	r1, [pc, #632]	; (8003e34 <__ssvfiscanf_r+0x294>)
 8003bba:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8003e38 <__ssvfiscanf_r+0x298>
 8003bbe:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	4692      	mov	sl, r2
 8003bc6:	91a1      	str	r1, [sp, #644]	; 0x284
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	270a      	movs	r7, #10
 8003bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 812a 	beq.w	8003e2a <__ssvfiscanf_r+0x28a>
 8003bd6:	4655      	mov	r5, sl
 8003bd8:	f000 fc14 	bl	8004404 <__locale_ctype_ptr>
 8003bdc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8003be0:	4458      	add	r0, fp
 8003be2:	7843      	ldrb	r3, [r0, #1]
 8003be4:	f013 0308 	ands.w	r3, r3, #8
 8003be8:	d01c      	beq.n	8003c24 <__ssvfiscanf_r+0x84>
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	dd12      	ble.n	8003c16 <__ssvfiscanf_r+0x76>
 8003bf0:	f000 fc08 	bl	8004404 <__locale_ctype_ptr>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	4410      	add	r0, r2
 8003bfa:	7842      	ldrb	r2, [r0, #1]
 8003bfc:	0712      	lsls	r2, r2, #28
 8003bfe:	d401      	bmi.n	8003c04 <__ssvfiscanf_r+0x64>
 8003c00:	46aa      	mov	sl, r5
 8003c02:	e7e3      	b.n	8003bcc <__ssvfiscanf_r+0x2c>
 8003c04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003c06:	3201      	adds	r2, #1
 8003c08:	9245      	str	r2, [sp, #276]	; 0x114
 8003c0a:	6862      	ldr	r2, [r4, #4]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	3a01      	subs	r2, #1
 8003c10:	6062      	str	r2, [r4, #4]
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	e7e9      	b.n	8003bea <__ssvfiscanf_r+0x4a>
 8003c16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	4798      	blx	r3
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d0e6      	beq.n	8003bf0 <__ssvfiscanf_r+0x50>
 8003c22:	e7ed      	b.n	8003c00 <__ssvfiscanf_r+0x60>
 8003c24:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003c28:	f040 8082 	bne.w	8003d30 <__ssvfiscanf_r+0x190>
 8003c2c:	9343      	str	r3, [sp, #268]	; 0x10c
 8003c2e:	9341      	str	r3, [sp, #260]	; 0x104
 8003c30:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003c34:	2b2a      	cmp	r3, #42	; 0x2a
 8003c36:	d103      	bne.n	8003c40 <__ssvfiscanf_r+0xa0>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	9341      	str	r3, [sp, #260]	; 0x104
 8003c3c:	f10a 0502 	add.w	r5, sl, #2
 8003c40:	46aa      	mov	sl, r5
 8003c42:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003c46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003c4a:	2a09      	cmp	r2, #9
 8003c4c:	d922      	bls.n	8003c94 <__ssvfiscanf_r+0xf4>
 8003c4e:	2203      	movs	r2, #3
 8003c50:	4879      	ldr	r0, [pc, #484]	; (8003e38 <__ssvfiscanf_r+0x298>)
 8003c52:	f7fc facd 	bl	80001f0 <memchr>
 8003c56:	b138      	cbz	r0, 8003c68 <__ssvfiscanf_r+0xc8>
 8003c58:	eba0 0309 	sub.w	r3, r0, r9
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	4098      	lsls	r0, r3
 8003c60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c62:	4318      	orrs	r0, r3
 8003c64:	9041      	str	r0, [sp, #260]	; 0x104
 8003c66:	46aa      	mov	sl, r5
 8003c68:	f89a 3000 	ldrb.w	r3, [sl]
 8003c6c:	2b67      	cmp	r3, #103	; 0x67
 8003c6e:	f10a 0501 	add.w	r5, sl, #1
 8003c72:	d82b      	bhi.n	8003ccc <__ssvfiscanf_r+0x12c>
 8003c74:	2b65      	cmp	r3, #101	; 0x65
 8003c76:	f080 809f 	bcs.w	8003db8 <__ssvfiscanf_r+0x218>
 8003c7a:	2b47      	cmp	r3, #71	; 0x47
 8003c7c:	d810      	bhi.n	8003ca0 <__ssvfiscanf_r+0x100>
 8003c7e:	2b45      	cmp	r3, #69	; 0x45
 8003c80:	f080 809a 	bcs.w	8003db8 <__ssvfiscanf_r+0x218>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d06c      	beq.n	8003d62 <__ssvfiscanf_r+0x1c2>
 8003c88:	2b25      	cmp	r3, #37	; 0x25
 8003c8a:	d051      	beq.n	8003d30 <__ssvfiscanf_r+0x190>
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c90:	9742      	str	r7, [sp, #264]	; 0x108
 8003c92:	e027      	b.n	8003ce4 <__ssvfiscanf_r+0x144>
 8003c94:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003c96:	fb07 1303 	mla	r3, r7, r3, r1
 8003c9a:	3b30      	subs	r3, #48	; 0x30
 8003c9c:	9343      	str	r3, [sp, #268]	; 0x10c
 8003c9e:	e7cf      	b.n	8003c40 <__ssvfiscanf_r+0xa0>
 8003ca0:	2b5b      	cmp	r3, #91	; 0x5b
 8003ca2:	d06a      	beq.n	8003d7a <__ssvfiscanf_r+0x1da>
 8003ca4:	d80c      	bhi.n	8003cc0 <__ssvfiscanf_r+0x120>
 8003ca6:	2b58      	cmp	r3, #88	; 0x58
 8003ca8:	d1f0      	bne.n	8003c8c <__ssvfiscanf_r+0xec>
 8003caa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb0:	9241      	str	r2, [sp, #260]	; 0x104
 8003cb2:	2210      	movs	r2, #16
 8003cb4:	9242      	str	r2, [sp, #264]	; 0x108
 8003cb6:	2b6e      	cmp	r3, #110	; 0x6e
 8003cb8:	bf8c      	ite	hi
 8003cba:	2304      	movhi	r3, #4
 8003cbc:	2303      	movls	r3, #3
 8003cbe:	e010      	b.n	8003ce2 <__ssvfiscanf_r+0x142>
 8003cc0:	2b63      	cmp	r3, #99	; 0x63
 8003cc2:	d065      	beq.n	8003d90 <__ssvfiscanf_r+0x1f0>
 8003cc4:	2b64      	cmp	r3, #100	; 0x64
 8003cc6:	d1e1      	bne.n	8003c8c <__ssvfiscanf_r+0xec>
 8003cc8:	9742      	str	r7, [sp, #264]	; 0x108
 8003cca:	e7f4      	b.n	8003cb6 <__ssvfiscanf_r+0x116>
 8003ccc:	2b70      	cmp	r3, #112	; 0x70
 8003cce:	d04b      	beq.n	8003d68 <__ssvfiscanf_r+0x1c8>
 8003cd0:	d826      	bhi.n	8003d20 <__ssvfiscanf_r+0x180>
 8003cd2:	2b6e      	cmp	r3, #110	; 0x6e
 8003cd4:	d062      	beq.n	8003d9c <__ssvfiscanf_r+0x1fc>
 8003cd6:	d84c      	bhi.n	8003d72 <__ssvfiscanf_r+0x1d2>
 8003cd8:	2b69      	cmp	r3, #105	; 0x69
 8003cda:	d1d7      	bne.n	8003c8c <__ssvfiscanf_r+0xec>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9342      	str	r3, [sp, #264]	; 0x108
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	dd68      	ble.n	8003dbc <__ssvfiscanf_r+0x21c>
 8003cea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003cec:	0659      	lsls	r1, r3, #25
 8003cee:	d407      	bmi.n	8003d00 <__ssvfiscanf_r+0x160>
 8003cf0:	f000 fb88 	bl	8004404 <__locale_ctype_ptr>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	4410      	add	r0, r2
 8003cfa:	7842      	ldrb	r2, [r0, #1]
 8003cfc:	0712      	lsls	r2, r2, #28
 8003cfe:	d464      	bmi.n	8003dca <__ssvfiscanf_r+0x22a>
 8003d00:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	dc73      	bgt.n	8003dee <__ssvfiscanf_r+0x24e>
 8003d06:	466b      	mov	r3, sp
 8003d08:	4622      	mov	r2, r4
 8003d0a:	a941      	add	r1, sp, #260	; 0x104
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f000 f897 	bl	8003e40 <_scanf_chars>
 8003d12:	2801      	cmp	r0, #1
 8003d14:	f000 8089 	beq.w	8003e2a <__ssvfiscanf_r+0x28a>
 8003d18:	2802      	cmp	r0, #2
 8003d1a:	f47f af71 	bne.w	8003c00 <__ssvfiscanf_r+0x60>
 8003d1e:	e01d      	b.n	8003d5c <__ssvfiscanf_r+0x1bc>
 8003d20:	2b75      	cmp	r3, #117	; 0x75
 8003d22:	d0d1      	beq.n	8003cc8 <__ssvfiscanf_r+0x128>
 8003d24:	2b78      	cmp	r3, #120	; 0x78
 8003d26:	d0c0      	beq.n	8003caa <__ssvfiscanf_r+0x10a>
 8003d28:	2b73      	cmp	r3, #115	; 0x73
 8003d2a:	d1af      	bne.n	8003c8c <__ssvfiscanf_r+0xec>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e7d8      	b.n	8003ce2 <__ssvfiscanf_r+0x142>
 8003d30:	6863      	ldr	r3, [r4, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	dd0c      	ble.n	8003d50 <__ssvfiscanf_r+0x1b0>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	455a      	cmp	r2, fp
 8003d3c:	d175      	bne.n	8003e2a <__ssvfiscanf_r+0x28a>
 8003d3e:	3301      	adds	r3, #1
 8003d40:	6862      	ldr	r2, [r4, #4]
 8003d42:	6023      	str	r3, [r4, #0]
 8003d44:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d46:	3a01      	subs	r2, #1
 8003d48:	3301      	adds	r3, #1
 8003d4a:	6062      	str	r2, [r4, #4]
 8003d4c:	9345      	str	r3, [sp, #276]	; 0x114
 8003d4e:	e757      	b.n	8003c00 <__ssvfiscanf_r+0x60>
 8003d50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d52:	4621      	mov	r1, r4
 8003d54:	4630      	mov	r0, r6
 8003d56:	4798      	blx	r3
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d0ec      	beq.n	8003d36 <__ssvfiscanf_r+0x196>
 8003d5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d159      	bne.n	8003e16 <__ssvfiscanf_r+0x276>
 8003d62:	f04f 30ff 	mov.w	r0, #4294967295
 8003d66:	e05c      	b.n	8003e22 <__ssvfiscanf_r+0x282>
 8003d68:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d6a:	f042 0220 	orr.w	r2, r2, #32
 8003d6e:	9241      	str	r2, [sp, #260]	; 0x104
 8003d70:	e79b      	b.n	8003caa <__ssvfiscanf_r+0x10a>
 8003d72:	2308      	movs	r3, #8
 8003d74:	9342      	str	r3, [sp, #264]	; 0x108
 8003d76:	2304      	movs	r3, #4
 8003d78:	e7b3      	b.n	8003ce2 <__ssvfiscanf_r+0x142>
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	f000 f9b7 	bl	80040f0 <__sccl>
 8003d82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d88:	9341      	str	r3, [sp, #260]	; 0x104
 8003d8a:	4605      	mov	r5, r0
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e7a8      	b.n	8003ce2 <__ssvfiscanf_r+0x142>
 8003d90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d96:	9341      	str	r3, [sp, #260]	; 0x104
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e7a2      	b.n	8003ce2 <__ssvfiscanf_r+0x142>
 8003d9c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003d9e:	06c3      	lsls	r3, r0, #27
 8003da0:	f53f af2e 	bmi.w	8003c00 <__ssvfiscanf_r+0x60>
 8003da4:	9b00      	ldr	r3, [sp, #0]
 8003da6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003da8:	1d19      	adds	r1, r3, #4
 8003daa:	9100      	str	r1, [sp, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	07c0      	lsls	r0, r0, #31
 8003db0:	bf4c      	ite	mi
 8003db2:	801a      	strhmi	r2, [r3, #0]
 8003db4:	601a      	strpl	r2, [r3, #0]
 8003db6:	e723      	b.n	8003c00 <__ssvfiscanf_r+0x60>
 8003db8:	2305      	movs	r3, #5
 8003dba:	e792      	b.n	8003ce2 <__ssvfiscanf_r+0x142>
 8003dbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	4798      	blx	r3
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d090      	beq.n	8003cea <__ssvfiscanf_r+0x14a>
 8003dc8:	e7c8      	b.n	8003d5c <__ssvfiscanf_r+0x1bc>
 8003dca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003dcc:	3201      	adds	r2, #1
 8003dce:	9245      	str	r2, [sp, #276]	; 0x114
 8003dd0:	6862      	ldr	r2, [r4, #4]
 8003dd2:	3a01      	subs	r2, #1
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	6062      	str	r2, [r4, #4]
 8003dd8:	dd02      	ble.n	8003de0 <__ssvfiscanf_r+0x240>
 8003dda:	3301      	adds	r3, #1
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	e787      	b.n	8003cf0 <__ssvfiscanf_r+0x150>
 8003de0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003de2:	4621      	mov	r1, r4
 8003de4:	4630      	mov	r0, r6
 8003de6:	4798      	blx	r3
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d081      	beq.n	8003cf0 <__ssvfiscanf_r+0x150>
 8003dec:	e7b6      	b.n	8003d5c <__ssvfiscanf_r+0x1bc>
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	dc06      	bgt.n	8003e00 <__ssvfiscanf_r+0x260>
 8003df2:	466b      	mov	r3, sp
 8003df4:	4622      	mov	r2, r4
 8003df6:	a941      	add	r1, sp, #260	; 0x104
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f000 f885 	bl	8003f08 <_scanf_i>
 8003dfe:	e788      	b.n	8003d12 <__ssvfiscanf_r+0x172>
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <__ssvfiscanf_r+0x29c>)
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f43f aefc 	beq.w	8003c00 <__ssvfiscanf_r+0x60>
 8003e08:	466b      	mov	r3, sp
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	a941      	add	r1, sp, #260	; 0x104
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f3af 8000 	nop.w
 8003e14:	e77d      	b.n	8003d12 <__ssvfiscanf_r+0x172>
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e1c:	bf18      	it	ne
 8003e1e:	f04f 30ff 	movne.w	r0, #4294967295
 8003e22:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003e2c:	e7f9      	b.n	8003e22 <__ssvfiscanf_r+0x282>
 8003e2e:	bf00      	nop
 8003e30:	08003aed 	.word	0x08003aed
 8003e34:	08003b67 	.word	0x08003b67
 8003e38:	08004688 	.word	0x08004688
 8003e3c:	00000000 	.word	0x00000000

08003e40 <_scanf_chars>:
 8003e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	4615      	mov	r5, r2
 8003e46:	688a      	ldr	r2, [r1, #8]
 8003e48:	4680      	mov	r8, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	b932      	cbnz	r2, 8003e5c <_scanf_chars+0x1c>
 8003e4e:	698a      	ldr	r2, [r1, #24]
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	bf14      	ite	ne
 8003e54:	f04f 32ff 	movne.w	r2, #4294967295
 8003e58:	2201      	moveq	r2, #1
 8003e5a:	608a      	str	r2, [r1, #8]
 8003e5c:	6822      	ldr	r2, [r4, #0]
 8003e5e:	06d1      	lsls	r1, r2, #27
 8003e60:	bf5f      	itttt	pl
 8003e62:	681a      	ldrpl	r2, [r3, #0]
 8003e64:	1d11      	addpl	r1, r2, #4
 8003e66:	6019      	strpl	r1, [r3, #0]
 8003e68:	6817      	ldrpl	r7, [r2, #0]
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	69a3      	ldr	r3, [r4, #24]
 8003e6e:	b1db      	cbz	r3, 8003ea8 <_scanf_chars+0x68>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <_scanf_chars+0x44>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	6962      	ldr	r2, [r4, #20]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	5cd3      	ldrb	r3, [r2, r3]
 8003e7c:	b9a3      	cbnz	r3, 8003ea8 <_scanf_chars+0x68>
 8003e7e:	2e00      	cmp	r6, #0
 8003e80:	d132      	bne.n	8003ee8 <_scanf_chars+0xa8>
 8003e82:	e006      	b.n	8003e92 <_scanf_chars+0x52>
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d007      	beq.n	8003e98 <_scanf_chars+0x58>
 8003e88:	2e00      	cmp	r6, #0
 8003e8a:	d12d      	bne.n	8003ee8 <_scanf_chars+0xa8>
 8003e8c:	69a3      	ldr	r3, [r4, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d12a      	bne.n	8003ee8 <_scanf_chars+0xa8>
 8003e92:	2001      	movs	r0, #1
 8003e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e98:	f000 fab4 	bl	8004404 <__locale_ctype_ptr>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4418      	add	r0, r3
 8003ea2:	7843      	ldrb	r3, [r0, #1]
 8003ea4:	071b      	lsls	r3, r3, #28
 8003ea6:	d4ef      	bmi.n	8003e88 <_scanf_chars+0x48>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	06da      	lsls	r2, r3, #27
 8003eac:	bf5e      	ittt	pl
 8003eae:	682b      	ldrpl	r3, [r5, #0]
 8003eb0:	781b      	ldrbpl	r3, [r3, #0]
 8003eb2:	703b      	strbpl	r3, [r7, #0]
 8003eb4:	682a      	ldr	r2, [r5, #0]
 8003eb6:	686b      	ldr	r3, [r5, #4]
 8003eb8:	f102 0201 	add.w	r2, r2, #1
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	68a2      	ldr	r2, [r4, #8]
 8003ec0:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ec4:	f102 32ff 	add.w	r2, r2, #4294967295
 8003ec8:	606b      	str	r3, [r5, #4]
 8003eca:	f106 0601 	add.w	r6, r6, #1
 8003ece:	bf58      	it	pl
 8003ed0:	3701      	addpl	r7, #1
 8003ed2:	60a2      	str	r2, [r4, #8]
 8003ed4:	b142      	cbz	r2, 8003ee8 <_scanf_chars+0xa8>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	dcc8      	bgt.n	8003e6c <_scanf_chars+0x2c>
 8003eda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	4798      	blx	r3
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d0c1      	beq.n	8003e6c <_scanf_chars+0x2c>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	f013 0310 	ands.w	r3, r3, #16
 8003eee:	d105      	bne.n	8003efc <_scanf_chars+0xbc>
 8003ef0:	68e2      	ldr	r2, [r4, #12]
 8003ef2:	3201      	adds	r2, #1
 8003ef4:	60e2      	str	r2, [r4, #12]
 8003ef6:	69a2      	ldr	r2, [r4, #24]
 8003ef8:	b102      	cbz	r2, 8003efc <_scanf_chars+0xbc>
 8003efa:	703b      	strb	r3, [r7, #0]
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	441e      	add	r6, r3
 8003f00:	6126      	str	r6, [r4, #16]
 8003f02:	2000      	movs	r0, #0
 8003f04:	e7c6      	b.n	8003e94 <_scanf_chars+0x54>
	...

08003f08 <_scanf_i>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	469a      	mov	sl, r3
 8003f0e:	4b74      	ldr	r3, [pc, #464]	; (80040e0 <_scanf_i+0x1d8>)
 8003f10:	460c      	mov	r4, r1
 8003f12:	4683      	mov	fp, r0
 8003f14:	4616      	mov	r6, r2
 8003f16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	ab03      	add	r3, sp, #12
 8003f1e:	68a7      	ldr	r7, [r4, #8]
 8003f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f24:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <_scanf_i+0x1dc>)
 8003f26:	69a1      	ldr	r1, [r4, #24]
 8003f28:	4a6f      	ldr	r2, [pc, #444]	; (80040e8 <_scanf_i+0x1e0>)
 8003f2a:	2903      	cmp	r1, #3
 8003f2c:	bf08      	it	eq
 8003f2e:	461a      	moveq	r2, r3
 8003f30:	1e7b      	subs	r3, r7, #1
 8003f32:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8003f36:	bf84      	itt	hi
 8003f38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003f3c:	60a3      	strhi	r3, [r4, #8]
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	9200      	str	r2, [sp, #0]
 8003f42:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003f46:	bf88      	it	hi
 8003f48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003f4c:	f104 091c 	add.w	r9, r4, #28
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bf8c      	ite	hi
 8003f54:	197f      	addhi	r7, r7, r5
 8003f56:	2700      	movls	r7, #0
 8003f58:	464b      	mov	r3, r9
 8003f5a:	f04f 0800 	mov.w	r8, #0
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	6831      	ldr	r1, [r6, #0]
 8003f62:	ab03      	add	r3, sp, #12
 8003f64:	2202      	movs	r2, #2
 8003f66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003f6a:	7809      	ldrb	r1, [r1, #0]
 8003f6c:	f7fc f940 	bl	80001f0 <memchr>
 8003f70:	9b01      	ldr	r3, [sp, #4]
 8003f72:	b330      	cbz	r0, 8003fc2 <_scanf_i+0xba>
 8003f74:	f1b8 0f01 	cmp.w	r8, #1
 8003f78:	d15a      	bne.n	8004030 <_scanf_i+0x128>
 8003f7a:	6862      	ldr	r2, [r4, #4]
 8003f7c:	b92a      	cbnz	r2, 8003f8a <_scanf_i+0x82>
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	2108      	movs	r1, #8
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	6061      	str	r1, [r4, #4]
 8003f88:	6022      	str	r2, [r4, #0]
 8003f8a:	6822      	ldr	r2, [r4, #0]
 8003f8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003f90:	6022      	str	r2, [r4, #0]
 8003f92:	68a2      	ldr	r2, [r4, #8]
 8003f94:	1e51      	subs	r1, r2, #1
 8003f96:	60a1      	str	r1, [r4, #8]
 8003f98:	b19a      	cbz	r2, 8003fc2 <_scanf_i+0xba>
 8003f9a:	6832      	ldr	r2, [r6, #0]
 8003f9c:	1c51      	adds	r1, r2, #1
 8003f9e:	6031      	str	r1, [r6, #0]
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	1c5d      	adds	r5, r3, #1
 8003fa6:	6873      	ldr	r3, [r6, #4]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	6073      	str	r3, [r6, #4]
 8003fae:	dc07      	bgt.n	8003fc0 <_scanf_i+0xb8>
 8003fb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003fb4:	4631      	mov	r1, r6
 8003fb6:	4658      	mov	r0, fp
 8003fb8:	4798      	blx	r3
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	f040 8086 	bne.w	80040cc <_scanf_i+0x1c4>
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	f108 0801 	add.w	r8, r8, #1
 8003fc6:	f1b8 0f03 	cmp.w	r8, #3
 8003fca:	d1c8      	bne.n	8003f5e <_scanf_i+0x56>
 8003fcc:	6862      	ldr	r2, [r4, #4]
 8003fce:	b90a      	cbnz	r2, 8003fd4 <_scanf_i+0xcc>
 8003fd0:	220a      	movs	r2, #10
 8003fd2:	6062      	str	r2, [r4, #4]
 8003fd4:	6862      	ldr	r2, [r4, #4]
 8003fd6:	4945      	ldr	r1, [pc, #276]	; (80040ec <_scanf_i+0x1e4>)
 8003fd8:	6960      	ldr	r0, [r4, #20]
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	1a89      	subs	r1, r1, r2
 8003fde:	f000 f887 	bl	80040f0 <__sccl>
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	f04f 0800 	mov.w	r8, #0
 8003fe8:	461d      	mov	r5, r3
 8003fea:	68a3      	ldr	r3, [r4, #8]
 8003fec:	6822      	ldr	r2, [r4, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d03a      	beq.n	8004068 <_scanf_i+0x160>
 8003ff2:	6831      	ldr	r1, [r6, #0]
 8003ff4:	6960      	ldr	r0, [r4, #20]
 8003ff6:	f891 c000 	ldrb.w	ip, [r1]
 8003ffa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d032      	beq.n	8004068 <_scanf_i+0x160>
 8004002:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004006:	d121      	bne.n	800404c <_scanf_i+0x144>
 8004008:	0510      	lsls	r0, r2, #20
 800400a:	d51f      	bpl.n	800404c <_scanf_i+0x144>
 800400c:	f108 0801 	add.w	r8, r8, #1
 8004010:	b117      	cbz	r7, 8004018 <_scanf_i+0x110>
 8004012:	3301      	adds	r3, #1
 8004014:	3f01      	subs	r7, #1
 8004016:	60a3      	str	r3, [r4, #8]
 8004018:	6873      	ldr	r3, [r6, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	6073      	str	r3, [r6, #4]
 8004020:	dd1b      	ble.n	800405a <_scanf_i+0x152>
 8004022:	6833      	ldr	r3, [r6, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	6033      	str	r3, [r6, #0]
 8004028:	68a3      	ldr	r3, [r4, #8]
 800402a:	3b01      	subs	r3, #1
 800402c:	60a3      	str	r3, [r4, #8]
 800402e:	e7dc      	b.n	8003fea <_scanf_i+0xe2>
 8004030:	f1b8 0f02 	cmp.w	r8, #2
 8004034:	d1ad      	bne.n	8003f92 <_scanf_i+0x8a>
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800403c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004040:	d1bf      	bne.n	8003fc2 <_scanf_i+0xba>
 8004042:	2110      	movs	r1, #16
 8004044:	6061      	str	r1, [r4, #4]
 8004046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404a:	e7a1      	b.n	8003f90 <_scanf_i+0x88>
 800404c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004050:	6022      	str	r2, [r4, #0]
 8004052:	780b      	ldrb	r3, [r1, #0]
 8004054:	702b      	strb	r3, [r5, #0]
 8004056:	3501      	adds	r5, #1
 8004058:	e7de      	b.n	8004018 <_scanf_i+0x110>
 800405a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800405e:	4631      	mov	r1, r6
 8004060:	4658      	mov	r0, fp
 8004062:	4798      	blx	r3
 8004064:	2800      	cmp	r0, #0
 8004066:	d0df      	beq.n	8004028 <_scanf_i+0x120>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	05d9      	lsls	r1, r3, #23
 800406c:	d50c      	bpl.n	8004088 <_scanf_i+0x180>
 800406e:	454d      	cmp	r5, r9
 8004070:	d908      	bls.n	8004084 <_scanf_i+0x17c>
 8004072:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800407a:	4632      	mov	r2, r6
 800407c:	4658      	mov	r0, fp
 800407e:	4798      	blx	r3
 8004080:	1e6f      	subs	r7, r5, #1
 8004082:	463d      	mov	r5, r7
 8004084:	454d      	cmp	r5, r9
 8004086:	d029      	beq.n	80040dc <_scanf_i+0x1d4>
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	f012 0210 	ands.w	r2, r2, #16
 800408e:	d113      	bne.n	80040b8 <_scanf_i+0x1b0>
 8004090:	702a      	strb	r2, [r5, #0]
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	9e00      	ldr	r6, [sp, #0]
 8004096:	4649      	mov	r1, r9
 8004098:	4658      	mov	r0, fp
 800409a:	47b0      	blx	r6
 800409c:	f8da 3000 	ldr.w	r3, [sl]
 80040a0:	6821      	ldr	r1, [r4, #0]
 80040a2:	1d1a      	adds	r2, r3, #4
 80040a4:	f8ca 2000 	str.w	r2, [sl]
 80040a8:	f011 0f20 	tst.w	r1, #32
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	d010      	beq.n	80040d2 <_scanf_i+0x1ca>
 80040b0:	6018      	str	r0, [r3, #0]
 80040b2:	68e3      	ldr	r3, [r4, #12]
 80040b4:	3301      	adds	r3, #1
 80040b6:	60e3      	str	r3, [r4, #12]
 80040b8:	eba5 0509 	sub.w	r5, r5, r9
 80040bc:	44a8      	add	r8, r5
 80040be:	6925      	ldr	r5, [r4, #16]
 80040c0:	4445      	add	r5, r8
 80040c2:	6125      	str	r5, [r4, #16]
 80040c4:	2000      	movs	r0, #0
 80040c6:	b007      	add	sp, #28
 80040c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040cc:	f04f 0800 	mov.w	r8, #0
 80040d0:	e7ca      	b.n	8004068 <_scanf_i+0x160>
 80040d2:	07ca      	lsls	r2, r1, #31
 80040d4:	bf4c      	ite	mi
 80040d6:	8018      	strhmi	r0, [r3, #0]
 80040d8:	6018      	strpl	r0, [r3, #0]
 80040da:	e7ea      	b.n	80040b2 <_scanf_i+0x1aa>
 80040dc:	2001      	movs	r0, #1
 80040de:	e7f2      	b.n	80040c6 <_scanf_i+0x1be>
 80040e0:	08004664 	.word	0x08004664
 80040e4:	0800424d 	.word	0x0800424d
 80040e8:	08004365 	.word	0x08004365
 80040ec:	0800469c 	.word	0x0800469c

080040f0 <__sccl>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	780b      	ldrb	r3, [r1, #0]
 80040f4:	2b5e      	cmp	r3, #94	; 0x5e
 80040f6:	bf13      	iteet	ne
 80040f8:	1c4a      	addne	r2, r1, #1
 80040fa:	1c8a      	addeq	r2, r1, #2
 80040fc:	784b      	ldrbeq	r3, [r1, #1]
 80040fe:	2100      	movne	r1, #0
 8004100:	bf08      	it	eq
 8004102:	2101      	moveq	r1, #1
 8004104:	1e44      	subs	r4, r0, #1
 8004106:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800410a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800410e:	42ac      	cmp	r4, r5
 8004110:	d1fb      	bne.n	800410a <__sccl+0x1a>
 8004112:	b913      	cbnz	r3, 800411a <__sccl+0x2a>
 8004114:	3a01      	subs	r2, #1
 8004116:	4610      	mov	r0, r2
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	f081 0401 	eor.w	r4, r1, #1
 800411e:	54c4      	strb	r4, [r0, r3]
 8004120:	1c51      	adds	r1, r2, #1
 8004122:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8004126:	2d2d      	cmp	r5, #45	; 0x2d
 8004128:	f101 36ff 	add.w	r6, r1, #4294967295
 800412c:	460a      	mov	r2, r1
 800412e:	d006      	beq.n	800413e <__sccl+0x4e>
 8004130:	2d5d      	cmp	r5, #93	; 0x5d
 8004132:	d0f0      	beq.n	8004116 <__sccl+0x26>
 8004134:	b90d      	cbnz	r5, 800413a <__sccl+0x4a>
 8004136:	4632      	mov	r2, r6
 8004138:	e7ed      	b.n	8004116 <__sccl+0x26>
 800413a:	462b      	mov	r3, r5
 800413c:	e7ef      	b.n	800411e <__sccl+0x2e>
 800413e:	780e      	ldrb	r6, [r1, #0]
 8004140:	2e5d      	cmp	r6, #93	; 0x5d
 8004142:	d0fa      	beq.n	800413a <__sccl+0x4a>
 8004144:	42b3      	cmp	r3, r6
 8004146:	dcf8      	bgt.n	800413a <__sccl+0x4a>
 8004148:	3301      	adds	r3, #1
 800414a:	429e      	cmp	r6, r3
 800414c:	54c4      	strb	r4, [r0, r3]
 800414e:	dcfb      	bgt.n	8004148 <__sccl+0x58>
 8004150:	3102      	adds	r1, #2
 8004152:	e7e6      	b.n	8004122 <__sccl+0x32>

08004154 <_strtol_l.isra.0>:
 8004154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	4680      	mov	r8, r0
 800415a:	4689      	mov	r9, r1
 800415c:	4692      	mov	sl, r2
 800415e:	461e      	mov	r6, r3
 8004160:	460f      	mov	r7, r1
 8004162:	463d      	mov	r5, r7
 8004164:	9808      	ldr	r0, [sp, #32]
 8004166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800416a:	f000 f947 	bl	80043fc <__locale_ctype_ptr_l>
 800416e:	4420      	add	r0, r4
 8004170:	7843      	ldrb	r3, [r0, #1]
 8004172:	f013 0308 	ands.w	r3, r3, #8
 8004176:	d132      	bne.n	80041de <_strtol_l.isra.0+0x8a>
 8004178:	2c2d      	cmp	r4, #45	; 0x2d
 800417a:	d132      	bne.n	80041e2 <_strtol_l.isra.0+0x8e>
 800417c:	787c      	ldrb	r4, [r7, #1]
 800417e:	1cbd      	adds	r5, r7, #2
 8004180:	2201      	movs	r2, #1
 8004182:	2e00      	cmp	r6, #0
 8004184:	d05d      	beq.n	8004242 <_strtol_l.isra.0+0xee>
 8004186:	2e10      	cmp	r6, #16
 8004188:	d109      	bne.n	800419e <_strtol_l.isra.0+0x4a>
 800418a:	2c30      	cmp	r4, #48	; 0x30
 800418c:	d107      	bne.n	800419e <_strtol_l.isra.0+0x4a>
 800418e:	782b      	ldrb	r3, [r5, #0]
 8004190:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004194:	2b58      	cmp	r3, #88	; 0x58
 8004196:	d14f      	bne.n	8004238 <_strtol_l.isra.0+0xe4>
 8004198:	786c      	ldrb	r4, [r5, #1]
 800419a:	2610      	movs	r6, #16
 800419c:	3502      	adds	r5, #2
 800419e:	2a00      	cmp	r2, #0
 80041a0:	bf14      	ite	ne
 80041a2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80041a6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80041aa:	2700      	movs	r7, #0
 80041ac:	fbb1 fcf6 	udiv	ip, r1, r6
 80041b0:	4638      	mov	r0, r7
 80041b2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80041b6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80041ba:	2b09      	cmp	r3, #9
 80041bc:	d817      	bhi.n	80041ee <_strtol_l.isra.0+0x9a>
 80041be:	461c      	mov	r4, r3
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	dd23      	ble.n	800420c <_strtol_l.isra.0+0xb8>
 80041c4:	1c7b      	adds	r3, r7, #1
 80041c6:	d007      	beq.n	80041d8 <_strtol_l.isra.0+0x84>
 80041c8:	4584      	cmp	ip, r0
 80041ca:	d31c      	bcc.n	8004206 <_strtol_l.isra.0+0xb2>
 80041cc:	d101      	bne.n	80041d2 <_strtol_l.isra.0+0x7e>
 80041ce:	45a6      	cmp	lr, r4
 80041d0:	db19      	blt.n	8004206 <_strtol_l.isra.0+0xb2>
 80041d2:	fb00 4006 	mla	r0, r0, r6, r4
 80041d6:	2701      	movs	r7, #1
 80041d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041dc:	e7eb      	b.n	80041b6 <_strtol_l.isra.0+0x62>
 80041de:	462f      	mov	r7, r5
 80041e0:	e7bf      	b.n	8004162 <_strtol_l.isra.0+0xe>
 80041e2:	2c2b      	cmp	r4, #43	; 0x2b
 80041e4:	bf04      	itt	eq
 80041e6:	1cbd      	addeq	r5, r7, #2
 80041e8:	787c      	ldrbeq	r4, [r7, #1]
 80041ea:	461a      	mov	r2, r3
 80041ec:	e7c9      	b.n	8004182 <_strtol_l.isra.0+0x2e>
 80041ee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80041f2:	2b19      	cmp	r3, #25
 80041f4:	d801      	bhi.n	80041fa <_strtol_l.isra.0+0xa6>
 80041f6:	3c37      	subs	r4, #55	; 0x37
 80041f8:	e7e2      	b.n	80041c0 <_strtol_l.isra.0+0x6c>
 80041fa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80041fe:	2b19      	cmp	r3, #25
 8004200:	d804      	bhi.n	800420c <_strtol_l.isra.0+0xb8>
 8004202:	3c57      	subs	r4, #87	; 0x57
 8004204:	e7dc      	b.n	80041c0 <_strtol_l.isra.0+0x6c>
 8004206:	f04f 37ff 	mov.w	r7, #4294967295
 800420a:	e7e5      	b.n	80041d8 <_strtol_l.isra.0+0x84>
 800420c:	1c7b      	adds	r3, r7, #1
 800420e:	d108      	bne.n	8004222 <_strtol_l.isra.0+0xce>
 8004210:	2322      	movs	r3, #34	; 0x22
 8004212:	f8c8 3000 	str.w	r3, [r8]
 8004216:	4608      	mov	r0, r1
 8004218:	f1ba 0f00 	cmp.w	sl, #0
 800421c:	d107      	bne.n	800422e <_strtol_l.isra.0+0xda>
 800421e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004222:	b102      	cbz	r2, 8004226 <_strtol_l.isra.0+0xd2>
 8004224:	4240      	negs	r0, r0
 8004226:	f1ba 0f00 	cmp.w	sl, #0
 800422a:	d0f8      	beq.n	800421e <_strtol_l.isra.0+0xca>
 800422c:	b10f      	cbz	r7, 8004232 <_strtol_l.isra.0+0xde>
 800422e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004232:	f8ca 9000 	str.w	r9, [sl]
 8004236:	e7f2      	b.n	800421e <_strtol_l.isra.0+0xca>
 8004238:	2430      	movs	r4, #48	; 0x30
 800423a:	2e00      	cmp	r6, #0
 800423c:	d1af      	bne.n	800419e <_strtol_l.isra.0+0x4a>
 800423e:	2608      	movs	r6, #8
 8004240:	e7ad      	b.n	800419e <_strtol_l.isra.0+0x4a>
 8004242:	2c30      	cmp	r4, #48	; 0x30
 8004244:	d0a3      	beq.n	800418e <_strtol_l.isra.0+0x3a>
 8004246:	260a      	movs	r6, #10
 8004248:	e7a9      	b.n	800419e <_strtol_l.isra.0+0x4a>
	...

0800424c <_strtol_r>:
 800424c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800424e:	4c06      	ldr	r4, [pc, #24]	; (8004268 <_strtol_r+0x1c>)
 8004250:	4d06      	ldr	r5, [pc, #24]	; (800426c <_strtol_r+0x20>)
 8004252:	6824      	ldr	r4, [r4, #0]
 8004254:	6a24      	ldr	r4, [r4, #32]
 8004256:	2c00      	cmp	r4, #0
 8004258:	bf08      	it	eq
 800425a:	462c      	moveq	r4, r5
 800425c:	9400      	str	r4, [sp, #0]
 800425e:	f7ff ff79 	bl	8004154 <_strtol_l.isra.0>
 8004262:	b003      	add	sp, #12
 8004264:	bd30      	pop	{r4, r5, pc}
 8004266:	bf00      	nop
 8004268:	2000000c 	.word	0x2000000c
 800426c:	20000070 	.word	0x20000070

08004270 <_strtoul_l.isra.0>:
 8004270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004274:	4680      	mov	r8, r0
 8004276:	4689      	mov	r9, r1
 8004278:	4692      	mov	sl, r2
 800427a:	461e      	mov	r6, r3
 800427c:	460f      	mov	r7, r1
 800427e:	463d      	mov	r5, r7
 8004280:	9808      	ldr	r0, [sp, #32]
 8004282:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004286:	f000 f8b9 	bl	80043fc <__locale_ctype_ptr_l>
 800428a:	4420      	add	r0, r4
 800428c:	7843      	ldrb	r3, [r0, #1]
 800428e:	f013 0308 	ands.w	r3, r3, #8
 8004292:	d130      	bne.n	80042f6 <_strtoul_l.isra.0+0x86>
 8004294:	2c2d      	cmp	r4, #45	; 0x2d
 8004296:	d130      	bne.n	80042fa <_strtoul_l.isra.0+0x8a>
 8004298:	787c      	ldrb	r4, [r7, #1]
 800429a:	1cbd      	adds	r5, r7, #2
 800429c:	2101      	movs	r1, #1
 800429e:	2e00      	cmp	r6, #0
 80042a0:	d05c      	beq.n	800435c <_strtoul_l.isra.0+0xec>
 80042a2:	2e10      	cmp	r6, #16
 80042a4:	d109      	bne.n	80042ba <_strtoul_l.isra.0+0x4a>
 80042a6:	2c30      	cmp	r4, #48	; 0x30
 80042a8:	d107      	bne.n	80042ba <_strtoul_l.isra.0+0x4a>
 80042aa:	782b      	ldrb	r3, [r5, #0]
 80042ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80042b0:	2b58      	cmp	r3, #88	; 0x58
 80042b2:	d14e      	bne.n	8004352 <_strtoul_l.isra.0+0xe2>
 80042b4:	786c      	ldrb	r4, [r5, #1]
 80042b6:	2610      	movs	r6, #16
 80042b8:	3502      	adds	r5, #2
 80042ba:	f04f 32ff 	mov.w	r2, #4294967295
 80042be:	2300      	movs	r3, #0
 80042c0:	fbb2 f2f6 	udiv	r2, r2, r6
 80042c4:	fb06 fc02 	mul.w	ip, r6, r2
 80042c8:	ea6f 0c0c 	mvn.w	ip, ip
 80042cc:	4618      	mov	r0, r3
 80042ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80042d2:	2f09      	cmp	r7, #9
 80042d4:	d817      	bhi.n	8004306 <_strtoul_l.isra.0+0x96>
 80042d6:	463c      	mov	r4, r7
 80042d8:	42a6      	cmp	r6, r4
 80042da:	dd23      	ble.n	8004324 <_strtoul_l.isra.0+0xb4>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db1e      	blt.n	800431e <_strtoul_l.isra.0+0xae>
 80042e0:	4282      	cmp	r2, r0
 80042e2:	d31c      	bcc.n	800431e <_strtoul_l.isra.0+0xae>
 80042e4:	d101      	bne.n	80042ea <_strtoul_l.isra.0+0x7a>
 80042e6:	45a4      	cmp	ip, r4
 80042e8:	db19      	blt.n	800431e <_strtoul_l.isra.0+0xae>
 80042ea:	fb00 4006 	mla	r0, r0, r6, r4
 80042ee:	2301      	movs	r3, #1
 80042f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042f4:	e7eb      	b.n	80042ce <_strtoul_l.isra.0+0x5e>
 80042f6:	462f      	mov	r7, r5
 80042f8:	e7c1      	b.n	800427e <_strtoul_l.isra.0+0xe>
 80042fa:	2c2b      	cmp	r4, #43	; 0x2b
 80042fc:	bf04      	itt	eq
 80042fe:	1cbd      	addeq	r5, r7, #2
 8004300:	787c      	ldrbeq	r4, [r7, #1]
 8004302:	4619      	mov	r1, r3
 8004304:	e7cb      	b.n	800429e <_strtoul_l.isra.0+0x2e>
 8004306:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800430a:	2f19      	cmp	r7, #25
 800430c:	d801      	bhi.n	8004312 <_strtoul_l.isra.0+0xa2>
 800430e:	3c37      	subs	r4, #55	; 0x37
 8004310:	e7e2      	b.n	80042d8 <_strtoul_l.isra.0+0x68>
 8004312:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004316:	2f19      	cmp	r7, #25
 8004318:	d804      	bhi.n	8004324 <_strtoul_l.isra.0+0xb4>
 800431a:	3c57      	subs	r4, #87	; 0x57
 800431c:	e7dc      	b.n	80042d8 <_strtoul_l.isra.0+0x68>
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	e7e5      	b.n	80042f0 <_strtoul_l.isra.0+0x80>
 8004324:	2b00      	cmp	r3, #0
 8004326:	da09      	bge.n	800433c <_strtoul_l.isra.0+0xcc>
 8004328:	2322      	movs	r3, #34	; 0x22
 800432a:	f8c8 3000 	str.w	r3, [r8]
 800432e:	f04f 30ff 	mov.w	r0, #4294967295
 8004332:	f1ba 0f00 	cmp.w	sl, #0
 8004336:	d107      	bne.n	8004348 <_strtoul_l.isra.0+0xd8>
 8004338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433c:	b101      	cbz	r1, 8004340 <_strtoul_l.isra.0+0xd0>
 800433e:	4240      	negs	r0, r0
 8004340:	f1ba 0f00 	cmp.w	sl, #0
 8004344:	d0f8      	beq.n	8004338 <_strtoul_l.isra.0+0xc8>
 8004346:	b10b      	cbz	r3, 800434c <_strtoul_l.isra.0+0xdc>
 8004348:	f105 39ff 	add.w	r9, r5, #4294967295
 800434c:	f8ca 9000 	str.w	r9, [sl]
 8004350:	e7f2      	b.n	8004338 <_strtoul_l.isra.0+0xc8>
 8004352:	2430      	movs	r4, #48	; 0x30
 8004354:	2e00      	cmp	r6, #0
 8004356:	d1b0      	bne.n	80042ba <_strtoul_l.isra.0+0x4a>
 8004358:	2608      	movs	r6, #8
 800435a:	e7ae      	b.n	80042ba <_strtoul_l.isra.0+0x4a>
 800435c:	2c30      	cmp	r4, #48	; 0x30
 800435e:	d0a4      	beq.n	80042aa <_strtoul_l.isra.0+0x3a>
 8004360:	260a      	movs	r6, #10
 8004362:	e7aa      	b.n	80042ba <_strtoul_l.isra.0+0x4a>

08004364 <_strtoul_r>:
 8004364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004366:	4c06      	ldr	r4, [pc, #24]	; (8004380 <_strtoul_r+0x1c>)
 8004368:	4d06      	ldr	r5, [pc, #24]	; (8004384 <_strtoul_r+0x20>)
 800436a:	6824      	ldr	r4, [r4, #0]
 800436c:	6a24      	ldr	r4, [r4, #32]
 800436e:	2c00      	cmp	r4, #0
 8004370:	bf08      	it	eq
 8004372:	462c      	moveq	r4, r5
 8004374:	9400      	str	r4, [sp, #0]
 8004376:	f7ff ff7b 	bl	8004270 <_strtoul_l.isra.0>
 800437a:	b003      	add	sp, #12
 800437c:	bd30      	pop	{r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	2000000c 	.word	0x2000000c
 8004384:	20000070 	.word	0x20000070

08004388 <__submore>:
 8004388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438c:	460c      	mov	r4, r1
 800438e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004394:	4299      	cmp	r1, r3
 8004396:	d11d      	bne.n	80043d4 <__submore+0x4c>
 8004398:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800439c:	f000 f8ac 	bl	80044f8 <_malloc_r>
 80043a0:	b918      	cbnz	r0, 80043aa <__submore+0x22>
 80043a2:	f04f 30ff 	mov.w	r0, #4294967295
 80043a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ae:	63a3      	str	r3, [r4, #56]	; 0x38
 80043b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80043b4:	6360      	str	r0, [r4, #52]	; 0x34
 80043b6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80043ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80043be:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80043c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043c6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80043ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80043ce:	6020      	str	r0, [r4, #0]
 80043d0:	2000      	movs	r0, #0
 80043d2:	e7e8      	b.n	80043a6 <__submore+0x1e>
 80043d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80043d6:	0077      	lsls	r7, r6, #1
 80043d8:	463a      	mov	r2, r7
 80043da:	f000 f8e7 	bl	80045ac <_realloc_r>
 80043de:	4605      	mov	r5, r0
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d0de      	beq.n	80043a2 <__submore+0x1a>
 80043e4:	eb00 0806 	add.w	r8, r0, r6
 80043e8:	4601      	mov	r1, r0
 80043ea:	4632      	mov	r2, r6
 80043ec:	4640      	mov	r0, r8
 80043ee:	f000 f829 	bl	8004444 <memcpy>
 80043f2:	f8c4 8000 	str.w	r8, [r4]
 80043f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80043fa:	e7e9      	b.n	80043d0 <__submore+0x48>

080043fc <__locale_ctype_ptr_l>:
 80043fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004400:	4770      	bx	lr
	...

08004404 <__locale_ctype_ptr>:
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <__locale_ctype_ptr+0x14>)
 8004406:	4a05      	ldr	r2, [pc, #20]	; (800441c <__locale_ctype_ptr+0x18>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf08      	it	eq
 8004410:	4613      	moveq	r3, r2
 8004412:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004416:	4770      	bx	lr
 8004418:	2000000c 	.word	0x2000000c
 800441c:	20000070 	.word	0x20000070

08004420 <__ascii_mbtowc>:
 8004420:	b082      	sub	sp, #8
 8004422:	b901      	cbnz	r1, 8004426 <__ascii_mbtowc+0x6>
 8004424:	a901      	add	r1, sp, #4
 8004426:	b142      	cbz	r2, 800443a <__ascii_mbtowc+0x1a>
 8004428:	b14b      	cbz	r3, 800443e <__ascii_mbtowc+0x1e>
 800442a:	7813      	ldrb	r3, [r2, #0]
 800442c:	600b      	str	r3, [r1, #0]
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	1c10      	adds	r0, r2, #0
 8004432:	bf18      	it	ne
 8004434:	2001      	movne	r0, #1
 8004436:	b002      	add	sp, #8
 8004438:	4770      	bx	lr
 800443a:	4610      	mov	r0, r2
 800443c:	e7fb      	b.n	8004436 <__ascii_mbtowc+0x16>
 800443e:	f06f 0001 	mvn.w	r0, #1
 8004442:	e7f8      	b.n	8004436 <__ascii_mbtowc+0x16>

08004444 <memcpy>:
 8004444:	b510      	push	{r4, lr}
 8004446:	1e43      	subs	r3, r0, #1
 8004448:	440a      	add	r2, r1
 800444a:	4291      	cmp	r1, r2
 800444c:	d100      	bne.n	8004450 <memcpy+0xc>
 800444e:	bd10      	pop	{r4, pc}
 8004450:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004454:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004458:	e7f7      	b.n	800444a <memcpy+0x6>
	...

0800445c <_free_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4605      	mov	r5, r0
 8004460:	2900      	cmp	r1, #0
 8004462:	d045      	beq.n	80044f0 <_free_r+0x94>
 8004464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004468:	1f0c      	subs	r4, r1, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	bfb8      	it	lt
 800446e:	18e4      	addlt	r4, r4, r3
 8004470:	f000 f8df 	bl	8004632 <__malloc_lock>
 8004474:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <_free_r+0x98>)
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	4610      	mov	r0, r2
 800447a:	b933      	cbnz	r3, 800448a <_free_r+0x2e>
 800447c:	6063      	str	r3, [r4, #4]
 800447e:	6014      	str	r4, [r2, #0]
 8004480:	4628      	mov	r0, r5
 8004482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004486:	f000 b8d5 	b.w	8004634 <__malloc_unlock>
 800448a:	42a3      	cmp	r3, r4
 800448c:	d90c      	bls.n	80044a8 <_free_r+0x4c>
 800448e:	6821      	ldr	r1, [r4, #0]
 8004490:	1862      	adds	r2, r4, r1
 8004492:	4293      	cmp	r3, r2
 8004494:	bf04      	itt	eq
 8004496:	681a      	ldreq	r2, [r3, #0]
 8004498:	685b      	ldreq	r3, [r3, #4]
 800449a:	6063      	str	r3, [r4, #4]
 800449c:	bf04      	itt	eq
 800449e:	1852      	addeq	r2, r2, r1
 80044a0:	6022      	streq	r2, [r4, #0]
 80044a2:	6004      	str	r4, [r0, #0]
 80044a4:	e7ec      	b.n	8004480 <_free_r+0x24>
 80044a6:	4613      	mov	r3, r2
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	b10a      	cbz	r2, 80044b0 <_free_r+0x54>
 80044ac:	42a2      	cmp	r2, r4
 80044ae:	d9fa      	bls.n	80044a6 <_free_r+0x4a>
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	1858      	adds	r0, r3, r1
 80044b4:	42a0      	cmp	r0, r4
 80044b6:	d10b      	bne.n	80044d0 <_free_r+0x74>
 80044b8:	6820      	ldr	r0, [r4, #0]
 80044ba:	4401      	add	r1, r0
 80044bc:	1858      	adds	r0, r3, r1
 80044be:	4282      	cmp	r2, r0
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	d1dd      	bne.n	8004480 <_free_r+0x24>
 80044c4:	6810      	ldr	r0, [r2, #0]
 80044c6:	6852      	ldr	r2, [r2, #4]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	4401      	add	r1, r0
 80044cc:	6019      	str	r1, [r3, #0]
 80044ce:	e7d7      	b.n	8004480 <_free_r+0x24>
 80044d0:	d902      	bls.n	80044d8 <_free_r+0x7c>
 80044d2:	230c      	movs	r3, #12
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	e7d3      	b.n	8004480 <_free_r+0x24>
 80044d8:	6820      	ldr	r0, [r4, #0]
 80044da:	1821      	adds	r1, r4, r0
 80044dc:	428a      	cmp	r2, r1
 80044de:	bf04      	itt	eq
 80044e0:	6811      	ldreq	r1, [r2, #0]
 80044e2:	6852      	ldreq	r2, [r2, #4]
 80044e4:	6062      	str	r2, [r4, #4]
 80044e6:	bf04      	itt	eq
 80044e8:	1809      	addeq	r1, r1, r0
 80044ea:	6021      	streq	r1, [r4, #0]
 80044ec:	605c      	str	r4, [r3, #4]
 80044ee:	e7c7      	b.n	8004480 <_free_r+0x24>
 80044f0:	bd38      	pop	{r3, r4, r5, pc}
 80044f2:	bf00      	nop
 80044f4:	200001fc 	.word	0x200001fc

080044f8 <_malloc_r>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	1ccd      	adds	r5, r1, #3
 80044fc:	f025 0503 	bic.w	r5, r5, #3
 8004500:	3508      	adds	r5, #8
 8004502:	2d0c      	cmp	r5, #12
 8004504:	bf38      	it	cc
 8004506:	250c      	movcc	r5, #12
 8004508:	2d00      	cmp	r5, #0
 800450a:	4606      	mov	r6, r0
 800450c:	db01      	blt.n	8004512 <_malloc_r+0x1a>
 800450e:	42a9      	cmp	r1, r5
 8004510:	d903      	bls.n	800451a <_malloc_r+0x22>
 8004512:	230c      	movs	r3, #12
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	2000      	movs	r0, #0
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	f000 f88a 	bl	8004632 <__malloc_lock>
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <_malloc_r+0xac>)
 8004520:	6814      	ldr	r4, [r2, #0]
 8004522:	4621      	mov	r1, r4
 8004524:	b991      	cbnz	r1, 800454c <_malloc_r+0x54>
 8004526:	4c20      	ldr	r4, [pc, #128]	; (80045a8 <_malloc_r+0xb0>)
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	b91b      	cbnz	r3, 8004534 <_malloc_r+0x3c>
 800452c:	4630      	mov	r0, r6
 800452e:	f000 f863 	bl	80045f8 <_sbrk_r>
 8004532:	6020      	str	r0, [r4, #0]
 8004534:	4629      	mov	r1, r5
 8004536:	4630      	mov	r0, r6
 8004538:	f000 f85e 	bl	80045f8 <_sbrk_r>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d124      	bne.n	800458a <_malloc_r+0x92>
 8004540:	230c      	movs	r3, #12
 8004542:	6033      	str	r3, [r6, #0]
 8004544:	4630      	mov	r0, r6
 8004546:	f000 f875 	bl	8004634 <__malloc_unlock>
 800454a:	e7e4      	b.n	8004516 <_malloc_r+0x1e>
 800454c:	680b      	ldr	r3, [r1, #0]
 800454e:	1b5b      	subs	r3, r3, r5
 8004550:	d418      	bmi.n	8004584 <_malloc_r+0x8c>
 8004552:	2b0b      	cmp	r3, #11
 8004554:	d90f      	bls.n	8004576 <_malloc_r+0x7e>
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	50cd      	str	r5, [r1, r3]
 800455a:	18cc      	adds	r4, r1, r3
 800455c:	4630      	mov	r0, r6
 800455e:	f000 f869 	bl	8004634 <__malloc_unlock>
 8004562:	f104 000b 	add.w	r0, r4, #11
 8004566:	1d23      	adds	r3, r4, #4
 8004568:	f020 0007 	bic.w	r0, r0, #7
 800456c:	1ac3      	subs	r3, r0, r3
 800456e:	d0d3      	beq.n	8004518 <_malloc_r+0x20>
 8004570:	425a      	negs	r2, r3
 8004572:	50e2      	str	r2, [r4, r3]
 8004574:	e7d0      	b.n	8004518 <_malloc_r+0x20>
 8004576:	428c      	cmp	r4, r1
 8004578:	684b      	ldr	r3, [r1, #4]
 800457a:	bf16      	itet	ne
 800457c:	6063      	strne	r3, [r4, #4]
 800457e:	6013      	streq	r3, [r2, #0]
 8004580:	460c      	movne	r4, r1
 8004582:	e7eb      	b.n	800455c <_malloc_r+0x64>
 8004584:	460c      	mov	r4, r1
 8004586:	6849      	ldr	r1, [r1, #4]
 8004588:	e7cc      	b.n	8004524 <_malloc_r+0x2c>
 800458a:	1cc4      	adds	r4, r0, #3
 800458c:	f024 0403 	bic.w	r4, r4, #3
 8004590:	42a0      	cmp	r0, r4
 8004592:	d005      	beq.n	80045a0 <_malloc_r+0xa8>
 8004594:	1a21      	subs	r1, r4, r0
 8004596:	4630      	mov	r0, r6
 8004598:	f000 f82e 	bl	80045f8 <_sbrk_r>
 800459c:	3001      	adds	r0, #1
 800459e:	d0cf      	beq.n	8004540 <_malloc_r+0x48>
 80045a0:	6025      	str	r5, [r4, #0]
 80045a2:	e7db      	b.n	800455c <_malloc_r+0x64>
 80045a4:	200001fc 	.word	0x200001fc
 80045a8:	20000200 	.word	0x20000200

080045ac <_realloc_r>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	4607      	mov	r7, r0
 80045b0:	4614      	mov	r4, r2
 80045b2:	460e      	mov	r6, r1
 80045b4:	b921      	cbnz	r1, 80045c0 <_realloc_r+0x14>
 80045b6:	4611      	mov	r1, r2
 80045b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045bc:	f7ff bf9c 	b.w	80044f8 <_malloc_r>
 80045c0:	b922      	cbnz	r2, 80045cc <_realloc_r+0x20>
 80045c2:	f7ff ff4b 	bl	800445c <_free_r>
 80045c6:	4625      	mov	r5, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045cc:	f000 f833 	bl	8004636 <_malloc_usable_size_r>
 80045d0:	42a0      	cmp	r0, r4
 80045d2:	d20f      	bcs.n	80045f4 <_realloc_r+0x48>
 80045d4:	4621      	mov	r1, r4
 80045d6:	4638      	mov	r0, r7
 80045d8:	f7ff ff8e 	bl	80044f8 <_malloc_r>
 80045dc:	4605      	mov	r5, r0
 80045de:	2800      	cmp	r0, #0
 80045e0:	d0f2      	beq.n	80045c8 <_realloc_r+0x1c>
 80045e2:	4631      	mov	r1, r6
 80045e4:	4622      	mov	r2, r4
 80045e6:	f7ff ff2d 	bl	8004444 <memcpy>
 80045ea:	4631      	mov	r1, r6
 80045ec:	4638      	mov	r0, r7
 80045ee:	f7ff ff35 	bl	800445c <_free_r>
 80045f2:	e7e9      	b.n	80045c8 <_realloc_r+0x1c>
 80045f4:	4635      	mov	r5, r6
 80045f6:	e7e7      	b.n	80045c8 <_realloc_r+0x1c>

080045f8 <_sbrk_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4c06      	ldr	r4, [pc, #24]	; (8004614 <_sbrk_r+0x1c>)
 80045fc:	2300      	movs	r3, #0
 80045fe:	4605      	mov	r5, r0
 8004600:	4608      	mov	r0, r1
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	f7fc fc28 	bl	8000e58 <_sbrk>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_sbrk_r+0x1a>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	b103      	cbz	r3, 8004612 <_sbrk_r+0x1a>
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	20000314 	.word	0x20000314

08004618 <__ascii_wctomb>:
 8004618:	b149      	cbz	r1, 800462e <__ascii_wctomb+0x16>
 800461a:	2aff      	cmp	r2, #255	; 0xff
 800461c:	bf85      	ittet	hi
 800461e:	238a      	movhi	r3, #138	; 0x8a
 8004620:	6003      	strhi	r3, [r0, #0]
 8004622:	700a      	strbls	r2, [r1, #0]
 8004624:	f04f 30ff 	movhi.w	r0, #4294967295
 8004628:	bf98      	it	ls
 800462a:	2001      	movls	r0, #1
 800462c:	4770      	bx	lr
 800462e:	4608      	mov	r0, r1
 8004630:	4770      	bx	lr

08004632 <__malloc_lock>:
 8004632:	4770      	bx	lr

08004634 <__malloc_unlock>:
 8004634:	4770      	bx	lr

08004636 <_malloc_usable_size_r>:
 8004636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800463a:	1f18      	subs	r0, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	bfbc      	itt	lt
 8004640:	580b      	ldrlt	r3, [r1, r0]
 8004642:	18c0      	addlt	r0, r0, r3
 8004644:	4770      	bx	lr
	...

08004648 <_init>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	bf00      	nop
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr

08004654 <_fini>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	bf00      	nop
 8004658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465a:	bc08      	pop	{r3}
 800465c:	469e      	mov	lr, r3
 800465e:	4770      	bx	lr
