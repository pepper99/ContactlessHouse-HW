
ContactlessHouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004110  08004110  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004118  08004118  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000078  08004198  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004198  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c195  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c53  00000000  00000000  0002c23d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002de90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002eb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016269  00000000  00000000  0002f748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000092a1  00000000  00000000  000459b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f62a  00000000  00000000  0004ec52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de27c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e0  00000000  00000000  000de2f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040a8 	.word	0x080040a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080040a8 	.word	0x080040a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fca4 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f820 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f952 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f926 	bl	80007e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f884 	bl	80006a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f8f8 	bl	800078c <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800059c:	f000 f8d2 	bl	8000744 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &inBuffer, sizeof inBuffer);
 80005a0:	2201      	movs	r2, #1
 80005a2:	4906      	ldr	r1, [pc, #24]	; (80005bc <main+0x3c>)
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <main+0x40>)
 80005a6:	f002 faf5 	bl	8002b94 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <main+0x44>)
 80005ac:	f002 f823 	bl	80025f6 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <main+0x48>)
 80005b6:	f001 fb5d 	bl	8001c74 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0x3a>
 80005bc:	200001c8 	.word	0x200001c8
 80005c0:	20000134 	.word	0x20000134
 80005c4:	200000a8 	.word	0x200000a8
 80005c8:	40020800 	.word	0x40020800

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f956 	bl	800388c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064a:	2304      	movs	r3, #4
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fb42 	bl	8001cdc <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 fa47 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fd9c 	bl	80021bc <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 fa31 	bl	8000af0 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_ADC1_Init+0x98>)
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <MX_ADC1_Init+0x9c>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ADC1_Init+0x98>)
 80006ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ADC1_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_ADC1_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_ADC1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ADC1_Init+0x98>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <MX_ADC1_Init+0xa0>)
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_ADC1_Init+0x98>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_ADC1_Init+0x98>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_ADC1_Init+0x98>)
 8000702:	f000 fc57 	bl	8000fb4 <HAL_ADC_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800070c:	f000 f9f0 	bl	8000af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_ADC1_Init+0x98>)
 8000722:	f000 fdc3 	bl	80012ac <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800072c:	f000 f9e0 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000ec 	.word	0x200000ec
 800073c:	40012000 	.word	0x40012000
 8000740:	0f000001 	.word	0x0f000001

08000744 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_TIM10_Init+0x40>)
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <MX_TIM10_Init+0x44>)
 800074c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_TIM10_Init+0x40>)
 8000750:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000754:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_TIM10_Init+0x40>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_TIM10_Init+0x40>)
 800075e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000762:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_TIM10_Init+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_TIM10_Init+0x40>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_TIM10_Init+0x40>)
 8000772:	f001 ff15 	bl	80025a0 <HAL_TIM_Base_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800077c:	f000 f9b8 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000a8 	.word	0x200000a8
 8000788:	40014400 	.word	0x40014400

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART1_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007c4:	f002 f900 	bl	80029c8 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f98f 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000134 	.word	0x20000134
 80007dc:	40011000 	.word	0x40011000

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_USART2_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000818:	f002 f8d6 	bl	80029c8 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f965 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000188 	.word	0x20000188
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0xf8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a36      	ldr	r2, [pc, #216]	; (800092c <MX_GPIO_Init+0xf8>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <MX_GPIO_Init+0xf8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_GPIO_Init+0xf8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a2f      	ldr	r2, [pc, #188]	; (800092c <MX_GPIO_Init+0xf8>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_GPIO_Init+0xf8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_GPIO_Init+0xf8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a28      	ldr	r2, [pc, #160]	; (800092c <MX_GPIO_Init+0xf8>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_GPIO_Init+0xf8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_GPIO_Init+0xf8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <MX_GPIO_Init+0xf8>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_GPIO_Init+0xf8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008c0:	481b      	ldr	r0, [pc, #108]	; (8000930 <MX_GPIO_Init+0xfc>)
 80008c2:	f001 f9d7 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	481a      	ldr	r0, [pc, #104]	; (8000934 <MX_GPIO_Init+0x100>)
 80008cc:	f001 f9d2 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0x104>)
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_GPIO_Init+0x100>)
 80008e6:	f001 f843 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80008ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0xfc>)
 8000904:	f001 f834 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_GPIO_Init+0x100>)
 8000920:	f001 f826 	bl	8001970 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800
 8000938:	10210000 	.word	0x10210000

0800093c <min>:
int max(int a, int b) {
	if(a > b) return a;
	else return b;
}

int min(int a, int b) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	if(a < b) return a;
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	429a      	cmp	r2, r3
 800094c:	da01      	bge.n	8000952 <min+0x16>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	e000      	b.n	8000954 <min+0x18>
	else return b;
 8000952:	683b      	ldr	r3, [r7, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000968:	2120      	movs	r1, #32
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <HAL_UART_RxCpltCallback+0x9c>)
 800096c:	f001 f99b 	bl	8001ca6 <HAL_GPIO_TogglePin>
	int cmd;
	switch(inBuffer) {
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <HAL_UART_RxCpltCallback+0xa0>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	3b31      	subs	r3, #49	; 0x31
 8000976:	2b05      	cmp	r3, #5
 8000978:	d836      	bhi.n	80009e8 <HAL_UART_RxCpltCallback+0x88>
 800097a:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <HAL_UART_RxCpltCallback+0x20>)
 800097c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000980:	08000999 	.word	0x08000999
 8000984:	080009a7 	.word	0x080009a7
 8000988:	080009b5 	.word	0x080009b5
 800098c:	080009c3 	.word	0x080009c3
 8000990:	080009d1 	.word	0x080009d1
 8000994:	080009dd 	.word	0x080009dd
	case '1':
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	4817      	ldr	r0, [pc, #92]	; (80009fc <HAL_UART_RxCpltCallback+0x9c>)
 80009a0:	f001 f968 	bl	8001c74 <HAL_GPIO_WritePin>
		break;
 80009a4:	e020      	b.n	80009e8 <HAL_UART_RxCpltCallback+0x88>
	case '2':
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	4813      	ldr	r0, [pc, #76]	; (80009fc <HAL_UART_RxCpltCallback+0x9c>)
 80009ae:	f001 f961 	bl	8001c74 <HAL_GPIO_WritePin>
		break;
 80009b2:	e019      	b.n	80009e8 <HAL_UART_RxCpltCallback+0x88>
	case '3':
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <HAL_UART_RxCpltCallback+0x9c>)
 80009bc:	f001 f95a 	bl	8001c74 <HAL_GPIO_WritePin>
		break;
 80009c0:	e012      	b.n	80009e8 <HAL_UART_RxCpltCallback+0x88>
	case '4':
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_UART_RxCpltCallback+0x9c>)
 80009ca:	f001 f953 	bl	8001c74 <HAL_GPIO_WritePin>
		break;
 80009ce:	e00b      	b.n	80009e8 <HAL_UART_RxCpltCallback+0x88>
	case '5':
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <HAL_UART_RxCpltCallback+0xa4>)
 80009d6:	f001 f94d 	bl	8001c74 <HAL_GPIO_WritePin>
		break;
 80009da:	e005      	b.n	80009e8 <HAL_UART_RxCpltCallback+0x88>
	case '6':
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <HAL_UART_RxCpltCallback+0xa4>)
 80009e2:	f001 f947 	bl	8001c74 <HAL_GPIO_WritePin>
		break;
 80009e6:	bf00      	nop
	}
//	HAL_UART_Transmit(&huart2, &buffer, 2, 12);
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
    HAL_UART_Receive_IT(&huart1, &inBuffer, sizeof inBuffer);
 80009e8:	2201      	movs	r2, #1
 80009ea:	4905      	ldr	r1, [pc, #20]	; (8000a00 <HAL_UART_RxCpltCallback+0xa0>)
 80009ec:	4806      	ldr	r0, [pc, #24]	; (8000a08 <HAL_UART_RxCpltCallback+0xa8>)
 80009ee:	f002 f8d1 	bl	8002b94 <HAL_UART_Receive_IT>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020000 	.word	0x40020000
 8000a00:	200001c8 	.word	0x200001c8
 8000a04:	40020800 	.word	0x40020800
 8000a08:	20000134 	.word	0x20000134

08000a0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if (htim == &htim10) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a29      	ldr	r2, [pc, #164]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d14a      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0xa6>
		HAL_ADC_Start(&hadc1);
 8000a1c:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a1e:	f000 fb0d 	bl	800103c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000a22:	2101      	movs	r1, #1
 8000a24:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a26:	f000 fbaf 	bl	8001188 <HAL_ADC_PollForConversion>
		ldr_val = HAL_ADC_GetValue(&hadc1);
 8000a2a:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a2c:	f000 fc30 	bl	8001290 <HAL_ADC_GetValue>
 8000a30:	4602      	mov	r2, r0
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a34:	601a      	str	r2, [r3, #0]
		p = mx - ldr_val;
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	4a22      	ldr	r2, [pc, #136]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a42:	6013      	str	r3, [r2, #0]
		c = mx - mn;
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000a50:	6013      	str	r3, [r2, #0]
		temp = (float)p/c * 100.0;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a6e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000ad8 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8000a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000a78:	edc3 7a00 	vstr	s15, [r3]
		pdc = min(temp, 100);
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000a7e:	edd3 7a00 	vldr	s15, [r3]
 8000a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a86:	2164      	movs	r1, #100	; 0x64
 8000a88:	ee17 0a90 	vmov	r0, s15
 8000a8c:	f7ff ff56 	bl	800093c <min>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000a96:	601a      	str	r2, [r3, #0]
//		sprintf(outBuffer, "%d\n", ldr_val);
		sprintf(outBuffer, "%dx", pdc);
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4911      	ldr	r1, [pc, #68]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000aa0:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000aa2:	f002 fefb 	bl	800389c <siprintf>
		HAL_UART_Transmit(&huart1, outBuffer, sizeof outBuffer, 12);
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	490f      	ldr	r1, [pc, #60]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000aac:	480f      	ldr	r0, [pc, #60]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000aae:	f001 ffd8 	bl	8002a62 <HAL_UART_Transmit>
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000a8 	.word	0x200000a8
 8000ac0:	200000ec 	.word	0x200000ec
 8000ac4:	20000178 	.word	0x20000178
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	200000a0 	.word	0x200000a0
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000174 	.word	0x20000174
 8000ad8:	42c80000 	.word	0x42c80000
 8000adc:	200000e8 	.word	0x200000e8
 8000ae0:	200000a4 	.word	0x200000a4
 8000ae4:	080040c0 	.word	0x080040c0
 8000ae8:	2000017c 	.word	0x2000017c
 8000aec:	20000134 	.word	0x20000134

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <Error_Handler+0x6>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 feb6 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_ADC_MspInit+0x7c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d127      	bne.n	8000bba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_ADC_MspInit+0x84>)
 8000bb6:	f000 fedb 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40012000 	.word	0x40012000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_TIM_Base_MspInit+0x48>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d115      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_TIM_Base_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_TIM_Base_MspInit+0x4c>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_TIM_Base_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2019      	movs	r0, #25
 8000c04:	f000 fe5b 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c08:	2019      	movs	r0, #25
 8000c0a:	f000 fe74 	bl	80018f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40014400 	.word	0x40014400
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a45      	ldr	r2, [pc, #276]	; (8000d54 <HAL_UART_MspInit+0x134>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d153      	bne.n	8000cea <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a43      	ldr	r2, [pc, #268]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b41      	ldr	r3, [pc, #260]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a3c      	ldr	r2, [pc, #240]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	482a      	ldr	r0, [pc, #168]	; (8000d5c <HAL_UART_MspInit+0x13c>)
 8000cb4:	f000 fe5c 	bl	8001970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4823      	ldr	r0, [pc, #140]	; (8000d60 <HAL_UART_MspInit+0x140>)
 8000cd4:	f000 fe4c 	bl	8001970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2025      	movs	r0, #37	; 0x25
 8000cde:	f000 fdee 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ce2:	2025      	movs	r0, #37	; 0x25
 8000ce4:	f000 fe07 	bl	80018f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce8:	e030      	b.n	8000d4c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_UART_MspInit+0x144>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d12b      	bne.n	8000d4c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_UART_MspInit+0x13c>)
 8000d48:	f000 fe12 	bl	8001970 <HAL_GPIO_Init>
}
 8000d4c:	bf00      	nop
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40011000 	.word	0x40011000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020400 	.word	0x40020400
 8000d64:	40004400 	.word	0x40004400

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8de 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dc2:	f001 fc3c 	bl	800263e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000a8 	.word	0x200000a8

08000dd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <USART1_IRQHandler+0x10>)
 8000dd6:	f001 ff33 	bl	8002c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000134 	.word	0x20000134

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f002 fd10 	bl	8003838 <__errno>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20020000 	.word	0x20020000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	20000094 	.word	0x20000094
 8000e4c:	200001d8 	.word	0x200001d8

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <SystemInit+0x28>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <SystemInit+0x28>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SystemInit+0x28>)
 8000e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e82:	e003      	b.n	8000e8c <LoopCopyDataInit>

08000e84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e8a:	3104      	adds	r1, #4

08000e8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e94:	d3f6      	bcc.n	8000e84 <CopyDataInit>
  ldr  r2, =_sbss
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e98:	e002      	b.n	8000ea0 <LoopFillZerobss>

08000e9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e9c:	f842 3b04 	str.w	r3, [r2], #4

08000ea0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ea2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ea4:	d3f9      	bcc.n	8000e9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ea6:	f7ff ffd3 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f002 fccb 	bl	8003844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fb67 	bl	8000580 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000eb8:	08004120 	.word	0x08004120
  ldr  r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ec0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000ec4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000ec8:	200001d4 	.word	0x200001d4

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fcd5 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fdf8 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fced 	bl	8001912 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 fcb5 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000010 	.word	0x20000010
 8000f70:	2000000c 	.word	0x2000000c

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000010 	.word	0x20000010
 8000f98:	200001cc 	.word	0x200001cc

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200001cc 	.word	0x200001cc

08000fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e033      	b.n	8001032 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d109      	bne.n	8000fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fdb8 	bl	8000b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d118      	bne.n	8001024 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ffa:	f023 0302 	bic.w	r3, r3, #2
 8000ffe:	f043 0202 	orr.w	r2, r3, #2
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fa82 	bl	8001510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f023 0303 	bic.w	r3, r3, #3
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
 8001022:	e001      	b.n	8001028 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Start+0x1a>
 8001052:	2302      	movs	r3, #2
 8001054:	e08a      	b.n	800116c <HAL_ADC_Start+0x130>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b01      	cmp	r3, #1
 800106a:	d018      	beq.n	800109e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800107c:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <HAL_ADC_Start+0x13c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a3e      	ldr	r2, [pc, #248]	; (800117c <HAL_ADC_Start+0x140>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9a      	lsrs	r2, r3, #18
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001090:	e002      	b.n	8001098 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	3b01      	subs	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d15e      	bne.n	800116a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010ea:	d106      	bne.n	80010fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f023 0206 	bic.w	r2, r3, #6
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	645a      	str	r2, [r3, #68]	; 0x44
 80010f8:	e002      	b.n	8001100 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_ADC_Start+0x144>)
 800110a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001114:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d11c      	bne.n	800116a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	e013      	b.n	800116a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <HAL_ADC_Start+0x148>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d10e      	bne.n	800116a <HAL_ADC_Start+0x12e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001168:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000008 	.word	0x20000008
 800117c:	431bde83 	.word	0x431bde83
 8001180:	40012300 	.word	0x40012300
 8001184:	40012000 	.word	0x40012000

08001188 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a4:	d113      	bne.n	80011ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b4:	d10b      	bne.n	80011ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f043 0220 	orr.w	r2, r3, #32
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e05c      	b.n	8001288 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011ce:	f7ff fee5 	bl	8000f9c <HAL_GetTick>
 80011d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011d4:	e01a      	b.n	800120c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d016      	beq.n	800120c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <HAL_ADC_PollForConversion+0x6c>
 80011e4:	f7ff feda 	bl	8000f9c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d20b      	bcs.n	800120c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f043 0204 	orr.w	r2, r3, #4
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e03d      	b.n	8001288 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b02      	cmp	r3, #2
 8001218:	d1dd      	bne.n	80011d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f06f 0212 	mvn.w	r2, #18
 8001222:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d123      	bne.n	8001286 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001242:	2b00      	cmp	r3, #0
 8001244:	d11f      	bne.n	8001286 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800125e:	2b00      	cmp	r3, #0
 8001260:	d111      	bne.n	8001286 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1c>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e113      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x244>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d925      	bls.n	8001324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68d9      	ldr	r1, [r3, #12]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	3b1e      	subs	r3, #30
 80012ee:	2207      	movs	r2, #7
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43da      	mvns	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68d9      	ldr	r1, [r3, #12]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	4603      	mov	r3, r0
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4403      	add	r3, r0
 8001316:	3b1e      	subs	r3, #30
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	e022      	b.n	800136a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	2207      	movs	r2, #7
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6919      	ldr	r1, [r3, #16]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	4603      	mov	r3, r0
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4403      	add	r3, r0
 8001360:	409a      	lsls	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b06      	cmp	r3, #6
 8001370:	d824      	bhi.n	80013bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b05      	subs	r3, #5
 8001384:	221f      	movs	r2, #31
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b05      	subs	r3, #5
 80013ae:	fa00 f203 	lsl.w	r2, r0, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34
 80013ba:	e04c      	b.n	8001456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	d824      	bhi.n	800140e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3b23      	subs	r3, #35	; 0x23
 80013d6:	221f      	movs	r2, #31
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43da      	mvns	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	400a      	ands	r2, r1
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b23      	subs	r3, #35	; 0x23
 8001400:	fa00 f203 	lsl.w	r2, r0, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
 800140c:	e023      	b.n	8001456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b41      	subs	r3, #65	; 0x41
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b41      	subs	r3, #65	; 0x41
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_ADC_ConfigChannel+0x250>)
 8001458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a28      	ldr	r2, [pc, #160]	; (8001500 <HAL_ADC_ConfigChannel+0x254>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d10f      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1d8>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b12      	cmp	r3, #18
 800146a:	d10b      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_ADC_ConfigChannel+0x254>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12b      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x23a>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <HAL_ADC_ConfigChannel+0x258>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d003      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0x1f4>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b11      	cmp	r3, #17
 800149e:	d122      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_ADC_ConfigChannel+0x258>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d111      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_ADC_ConfigChannel+0x25c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_ADC_ConfigChannel+0x260>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	0c9a      	lsrs	r2, r3, #18
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014d8:	e002      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40012300 	.word	0x40012300
 8001500:	40012000 	.word	0x40012000
 8001504:	10000012 	.word	0x10000012
 8001508:	20000008 	.word	0x20000008
 800150c:	431bde83 	.word	0x431bde83

08001510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001518:	4b79      	ldr	r3, [pc, #484]	; (8001700 <ADC_Init+0x1f0>)
 800151a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	431a      	orrs	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	021a      	lsls	r2, r3, #8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800158a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6899      	ldr	r1, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	4a58      	ldr	r2, [pc, #352]	; (8001704 <ADC_Init+0x1f4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d022      	beq.n	80015ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	e00f      	b.n	800160e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800160c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0202 	bic.w	r2, r2, #2
 800161c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6899      	ldr	r1, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7e1b      	ldrb	r3, [r3, #24]
 8001628:	005a      	lsls	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800164a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800165a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	3b01      	subs	r3, #1
 8001668:	035a      	lsls	r2, r3, #13
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	e007      	b.n	8001684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001682:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	3b01      	subs	r3, #1
 80016a0:	051a      	lsls	r2, r3, #20
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c6:	025a      	lsls	r2, r3, #9
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	029a      	lsls	r2, r3, #10
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40012300 	.word	0x40012300
 8001704:	0f000001 	.word	0x0f000001

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0b      	blt.n	8001796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <__NVIC_EnableIRQ+0x38>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2001      	movs	r0, #1
 800178e:	fa00 f202 	lsl.w	r2, r0, r2
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff29 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff3e 	bl	8001750 <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff31 	bl	800176c <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffa2 	bl	8001864 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d004      	beq.n	8001948 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e00c      	b.n	8001962 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2205      	movs	r2, #5
 800194c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e159      	b.n	8001c40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8148 	bne.w	8001c3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d00b      	beq.n	80019ca <HAL_GPIO_Init+0x5a>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019be:	2b11      	cmp	r3, #17
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b12      	cmp	r3, #18
 80019c8:	d130      	bne.n	8001a2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0201 	and.w	r2, r3, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0xfc>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b12      	cmp	r3, #18
 8001a6a:	d123      	bne.n	8001ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a2 	beq.w	8001c3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a55      	ldr	r2, [pc, #340]	; (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b12:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x202>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a47      	ldr	r2, [pc, #284]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x1fe>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a46      	ldr	r2, [pc, #280]	; (8001c64 <HAL_GPIO_Init+0x2f4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a45      	ldr	r2, [pc, #276]	; (8001c68 <HAL_GPIO_Init+0x2f8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x1f6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a44      	ldr	r2, [pc, #272]	; (8001c6c <HAL_GPIO_Init+0x2fc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x1f2>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b62:	2307      	movs	r3, #7
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b84:	4934      	ldr	r1, [pc, #208]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb6:	4a2e      	ldr	r2, [pc, #184]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f aea2 	bls.w	800198c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3724      	adds	r7, #36	; 0x24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40013c00 	.word	0x40013c00

08001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c84:	787b      	ldrb	r3, [r7, #1]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c90:	e003      	b.n	8001c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	401a      	ands	r2, r3
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d104      	bne.n	8001cca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e25b      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d075      	beq.n	8001de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cfa:	4ba3      	ldr	r3, [pc, #652]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d00c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d06:	4ba0      	ldr	r3, [pc, #640]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d112      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d12:	4b9d      	ldr	r3, [pc, #628]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	4b99      	ldr	r3, [pc, #612]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d05b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x108>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d157      	bne.n	8001de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e236      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d106      	bne.n	8001d50 <HAL_RCC_OscConfig+0x74>
 8001d42:	4b91      	ldr	r3, [pc, #580]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a90      	ldr	r2, [pc, #576]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xb0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x98>
 8001d5a:	4b8b      	ldr	r3, [pc, #556]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a8a      	ldr	r2, [pc, #552]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a87      	ldr	r2, [pc, #540]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xb0>
 8001d74:	4b84      	ldr	r3, [pc, #528]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a83      	ldr	r2, [pc, #524]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a80      	ldr	r2, [pc, #512]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff f902 	bl	8000f9c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f8fe 	bl	8000f9c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1fb      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b76      	ldr	r3, [pc, #472]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xc0>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f8ee 	bl	8000f9c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff f8ea 	bl	8000f9c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1e7      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	4b6c      	ldr	r3, [pc, #432]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xe8>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d063      	beq.n	8001eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001df2:	4b65      	ldr	r3, [pc, #404]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfe:	4b62      	ldr	r3, [pc, #392]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d11c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	4b5c      	ldr	r3, [pc, #368]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x152>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e1bb      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4952      	ldr	r1, [pc, #328]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	e03a      	b.n	8001eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_RCC_OscConfig+0x2b0>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff f8a3 	bl	8000f9c <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f89f 	bl	8000f9c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e19c      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4940      	ldr	r1, [pc, #256]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCC_OscConfig+0x2b0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f882 	bl	8000f9c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f87e 	bl	8000f9c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e17b      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d030      	beq.n	8001f28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d016      	beq.n	8001efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_RCC_OscConfig+0x2b4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7ff f862 	bl	8000f9c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff f85e 	bl	8000f9c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e15b      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x200>
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_OscConfig+0x2b4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff f84b 	bl	8000f9c <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f847 	bl	8000f9c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e144      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80a0 	beq.w	8002076 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x2b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d121      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_RCC_OscConfig+0x2b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_RCC_OscConfig+0x2b8>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f80d 	bl	8000f9c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e011      	b.n	8001faa <HAL_RCC_OscConfig+0x2ce>
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470000 	.word	0x42470000
 8001f90:	42470e80 	.word	0x42470e80
 8001f94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7ff f800 	bl	8000f9c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0fd      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b81      	ldr	r3, [pc, #516]	; (80021b0 <HAL_RCC_OscConfig+0x4d4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d106      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2f0>
 8001fbe:	4b7d      	ldr	r3, [pc, #500]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	4a7c      	ldr	r2, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fca:	e01c      	b.n	8002006 <HAL_RCC_OscConfig+0x32a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_OscConfig+0x312>
 8001fd4:	4b77      	ldr	r3, [pc, #476]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4a76      	ldr	r2, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe0:	4b74      	ldr	r3, [pc, #464]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	4a73      	ldr	r2, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6713      	str	r3, [r2, #112]	; 0x70
 8001fec:	e00b      	b.n	8002006 <HAL_RCC_OscConfig+0x32a>
 8001fee:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a70      	ldr	r2, [pc, #448]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	4b6e      	ldr	r3, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a6d      	ldr	r2, [pc, #436]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7fe ffc5 	bl	8000f9c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe ffc1 	bl	8000f9c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0bc      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ee      	beq.n	8002016 <HAL_RCC_OscConfig+0x33a>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe ffaf 	bl	8000f9c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe ffab 	bl	8000f9c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0a6      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4b56      	ldr	r3, [pc, #344]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b52      	ldr	r3, [pc, #328]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8092 	beq.w	80021a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d05c      	beq.n	8002146 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d141      	bne.n	8002118 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <HAL_RCC_OscConfig+0x4dc>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7fe ff7f 	bl	8000f9c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a2:	f7fe ff7b 	bl	8000f9c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e078      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	019b      	lsls	r3, r3, #6
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	3b01      	subs	r3, #1
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	4933      	ldr	r1, [pc, #204]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_RCC_OscConfig+0x4dc>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe ff54 	bl	8000f9c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe ff50 	bl	8000f9c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e04d      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x41c>
 8002116:	e045      	b.n	80021a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_OscConfig+0x4dc>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe ff3d 	bl	8000f9c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe ff39 	bl	8000f9c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e036      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x44a>
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e029      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_RCC_OscConfig+0x4d8>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	429a      	cmp	r2, r3
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d115      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800217a:	4013      	ands	r3, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002180:	4293      	cmp	r3, r2
 8002182:	d10d      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40007000 	.word	0x40007000
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470060 	.word	0x42470060

080021bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0cc      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d0:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d90c      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b65      	ldr	r3, [pc, #404]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0b8      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800221a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002228:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	494d      	ldr	r1, [pc, #308]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d044      	beq.n	80022dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d119      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e07f      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d003      	beq.n	800227a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002276:	2b03      	cmp	r3, #3
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06f      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e067      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229a:	4b37      	ldr	r3, [pc, #220]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f023 0203 	bic.w	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4934      	ldr	r1, [pc, #208]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fe76 	bl	8000f9c <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f7fe fe72 	bl	8000f9c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e04f      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 020c 	and.w	r2, r3, #12
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	429a      	cmp	r2, r3
 80022da:	d1eb      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b25      	ldr	r3, [pc, #148]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d20c      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e032      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4916      	ldr	r1, [pc, #88]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002342:	f000 f821 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8002346:	4601      	mov	r1, r0
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	5cd3      	ldrb	r3, [r2, r3]
 8002356:	fa21 f303 	lsr.w	r3, r1, r3
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fdd6 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00
 8002378:	40023800 	.word	0x40023800
 800237c:	080040c4 	.word	0x080040c4
 8002380:	20000008 	.word	0x20000008
 8002384:	2000000c 	.word	0x2000000c

08002388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d007      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x32>
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d008      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x38>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80b4 	bne.w	800251c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023b6:	60bb      	str	r3, [r7, #8]
       break;
 80023b8:	e0b3      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ba:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80023bc:	60bb      	str	r3, [r7, #8]
      break;
 80023be:	e0b0      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c0:	4b5a      	ldr	r3, [pc, #360]	; (800252c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ca:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d04a      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d6:	4b55      	ldr	r3, [pc, #340]	; (800252c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	f04f 0400 	mov.w	r4, #0
 80023e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	ea03 0501 	and.w	r5, r3, r1
 80023ec:	ea04 0602 	and.w	r6, r4, r2
 80023f0:	4629      	mov	r1, r5
 80023f2:	4632      	mov	r2, r6
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	f04f 0400 	mov.w	r4, #0
 80023fc:	0154      	lsls	r4, r2, #5
 80023fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002402:	014b      	lsls	r3, r1, #5
 8002404:	4619      	mov	r1, r3
 8002406:	4622      	mov	r2, r4
 8002408:	1b49      	subs	r1, r1, r5
 800240a:	eb62 0206 	sbc.w	r2, r2, r6
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	f04f 0400 	mov.w	r4, #0
 8002416:	0194      	lsls	r4, r2, #6
 8002418:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800241c:	018b      	lsls	r3, r1, #6
 800241e:	1a5b      	subs	r3, r3, r1
 8002420:	eb64 0402 	sbc.w	r4, r4, r2
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	00e2      	lsls	r2, r4, #3
 800242e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002432:	00d9      	lsls	r1, r3, #3
 8002434:	460b      	mov	r3, r1
 8002436:	4614      	mov	r4, r2
 8002438:	195b      	adds	r3, r3, r5
 800243a:	eb44 0406 	adc.w	r4, r4, r6
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	0262      	lsls	r2, r4, #9
 8002448:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800244c:	0259      	lsls	r1, r3, #9
 800244e:	460b      	mov	r3, r1
 8002450:	4614      	mov	r4, r2
 8002452:	4618      	mov	r0, r3
 8002454:	4621      	mov	r1, r4
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f04f 0400 	mov.w	r4, #0
 800245c:	461a      	mov	r2, r3
 800245e:	4623      	mov	r3, r4
 8002460:	f7fd ff0e 	bl	8000280 <__aeabi_uldivmod>
 8002464:	4603      	mov	r3, r0
 8002466:	460c      	mov	r4, r1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e049      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	f04f 0400 	mov.w	r4, #0
 8002476:	f240 11ff 	movw	r1, #511	; 0x1ff
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	ea03 0501 	and.w	r5, r3, r1
 8002482:	ea04 0602 	and.w	r6, r4, r2
 8002486:	4629      	mov	r1, r5
 8002488:	4632      	mov	r2, r6
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	f04f 0400 	mov.w	r4, #0
 8002492:	0154      	lsls	r4, r2, #5
 8002494:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002498:	014b      	lsls	r3, r1, #5
 800249a:	4619      	mov	r1, r3
 800249c:	4622      	mov	r2, r4
 800249e:	1b49      	subs	r1, r1, r5
 80024a0:	eb62 0206 	sbc.w	r2, r2, r6
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	f04f 0400 	mov.w	r4, #0
 80024ac:	0194      	lsls	r4, r2, #6
 80024ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024b2:	018b      	lsls	r3, r1, #6
 80024b4:	1a5b      	subs	r3, r3, r1
 80024b6:	eb64 0402 	sbc.w	r4, r4, r2
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	00e2      	lsls	r2, r4, #3
 80024c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024c8:	00d9      	lsls	r1, r3, #3
 80024ca:	460b      	mov	r3, r1
 80024cc:	4614      	mov	r4, r2
 80024ce:	195b      	adds	r3, r3, r5
 80024d0:	eb44 0406 	adc.w	r4, r4, r6
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	02a2      	lsls	r2, r4, #10
 80024de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024e2:	0299      	lsls	r1, r3, #10
 80024e4:	460b      	mov	r3, r1
 80024e6:	4614      	mov	r4, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	4621      	mov	r1, r4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f04f 0400 	mov.w	r4, #0
 80024f2:	461a      	mov	r2, r3
 80024f4:	4623      	mov	r3, r4
 80024f6:	f7fd fec3 	bl	8000280 <__aeabi_uldivmod>
 80024fa:	4603      	mov	r3, r0
 80024fc:	460c      	mov	r4, r1
 80024fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	fbb2 f3f3 	udiv	r3, r2, r3
 8002518:	60bb      	str	r3, [r7, #8]
      break;
 800251a:	e002      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800251e:	60bb      	str	r3, [r7, #8]
      break;
 8002520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002522:	68bb      	ldr	r3, [r7, #8]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	00f42400 	.word	0x00f42400
 8002534:	007a1200 	.word	0x007a1200

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000008 	.word	0x20000008

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002554:	f7ff fff0 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002558:	4601      	mov	r1, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4a03      	ldr	r2, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	080040d4 	.word	0x080040d4

08002578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800257c:	f7ff ffdc 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002580:	4601      	mov	r1, r0
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0b5b      	lsrs	r3, r3, #13
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_RCC_GetPCLK2Freq+0x24>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	080040d4 	.word	0x080040d4

080025a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e01d      	b.n	80025ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fb02 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3304      	adds	r3, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f000 f95e 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b06      	cmp	r3, #6
 800261e:	d007      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d122      	bne.n	800269a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d11b      	bne.n	800269a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f06f 0202 	mvn.w	r2, #2
 800266a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f8ee 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 8002686:	e005      	b.n	8002694 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f8e0 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8f1 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d122      	bne.n	80026ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d11b      	bne.n	80026ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0204 	mvn.w	r2, #4
 80026be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8c4 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 80026da:	e005      	b.n	80026e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8b6 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8c7 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d122      	bne.n	8002742 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11b      	bne.n	8002742 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f06f 0208 	mvn.w	r2, #8
 8002712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2204      	movs	r2, #4
 8002718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f89a 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 800272e:	e005      	b.n	800273c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f88c 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f89d 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b10      	cmp	r3, #16
 800274e:	d122      	bne.n	8002796 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b10      	cmp	r3, #16
 800275c:	d11b      	bne.n	8002796 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f06f 0210 	mvn.w	r2, #16
 8002766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2208      	movs	r2, #8
 800276c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f870 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 8002782:	e005      	b.n	8002790 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f862 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f873 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10e      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f06f 0201 	mvn.w	r2, #1
 80027ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fe f925 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d10e      	bne.n	80027ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d107      	bne.n	80027ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8e3 	bl	80029b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d10e      	bne.n	800281a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d107      	bne.n	800281a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f838 	bl	800288a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b20      	cmp	r3, #32
 8002826:	d10e      	bne.n	8002846 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b20      	cmp	r3, #32
 8002834:	d107      	bne.n	8002846 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0220 	mvn.w	r2, #32
 800283e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8ad 	bl	80029a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00f      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a31      	ldr	r2, [pc, #196]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a30      	ldr	r2, [pc, #192]	; (800298c <TIM_Base_SetConfig+0xec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01b      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d017      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a22      	ldr	r2, [pc, #136]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a21      	ldr	r2, [pc, #132]	; (800298c <TIM_Base_SetConfig+0xec>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00f      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a20      	ldr	r2, [pc, #128]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <TIM_Base_SetConfig+0xf4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <TIM_Base_SetConfig+0xf8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <TIM_Base_SetConfig+0xfc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a08      	ldr	r2, [pc, #32]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d103      	bne.n	8002970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	615a      	str	r2, [r3, #20]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40014000 	.word	0x40014000
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800

080029a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e03f      	b.n	8002a5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe f916 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fb97 	bl	8003140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b088      	sub	sp, #32
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	f040 8083 	bne.w	8002b8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_UART_Transmit+0x2e>
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e07b      	b.n	8002b8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UART_Transmit+0x40>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e074      	b.n	8002b8c <HAL_UART_Transmit+0x12a>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2221      	movs	r2, #33	; 0x21
 8002ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fa70 	bl	8000f9c <HAL_GetTick>
 8002abc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	88fa      	ldrh	r2, [r7, #6]
 8002ac2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ad2:	e042      	b.n	8002b5a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	d122      	bne.n	8002b32 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f9b6 	bl	8002e68 <UART_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e042      	b.n	8002b8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3302      	adds	r3, #2
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	e017      	b.n	8002b5a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	e013      	b.n	8002b5a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f993 	bl	8002e68 <UART_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e01f      	b.n	8002b8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	60ba      	str	r2, [r7, #8]
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1b7      	bne.n	8002ad4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2140      	movs	r1, #64	; 0x40
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f97a 	bl	8002e68 <UART_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e006      	b.n	8002b8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e000      	b.n	8002b8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
  }
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d140      	bne.n	8002c30 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_UART_Receive_IT+0x26>
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e039      	b.n	8002c32 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Receive_IT+0x38>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e032      	b.n	8002c32 <HAL_UART_Receive_IT+0x9e>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2222      	movs	r2, #34	; 0x22
 8002bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c0a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_UART_IRQHandler+0x52>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9d6 	bl	800303c <UART_Receive_IT>
      return;
 8002c90:	e0d1      	b.n	8002e36 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80b0 	beq.w	8002dfa <HAL_UART_IRQHandler+0x1ba>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x70>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80a5 	beq.w	8002dfa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x90>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_UART_IRQHandler+0xb0>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	f043 0202 	orr.w	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_UART_IRQHandler+0xd0>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	f043 0204 	orr.w	r2, r3, #4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00f      	beq.n	8002d3a <HAL_UART_IRQHandler+0xfa>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d104      	bne.n	8002d2e <HAL_UART_IRQHandler+0xee>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	f043 0208 	orr.w	r2, r3, #8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d078      	beq.n	8002e34 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_UART_IRQHandler+0x11c>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f970 	bl	800303c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	bf0c      	ite	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <HAL_UART_IRQHandler+0x144>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d031      	beq.n	8002de8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f8b9 	bl	8002efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d123      	bne.n	8002de0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	4a21      	ldr	r2, [pc, #132]	; (8002e3c <HAL_UART_IRQHandler+0x1fc>)
 8002db6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fdb4 	bl	800192a <HAL_DMA_Abort_IT>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d016      	beq.n	8002df6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd6:	e00e      	b.n	8002df6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f83b 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dde:	e00a      	b.n	8002df6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f837 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de6:	e006      	b.n	8002df6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f833 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002df4:	e01e      	b.n	8002e34 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df6:	bf00      	nop
    return;
 8002df8:	e01c      	b.n	8002e34 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1d6>
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8a6 	bl	8002f60 <UART_Transmit_IT>
    return;
 8002e14:	e00f      	b.n	8002e36 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1f6>
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8ee 	bl	800300c <UART_EndTransmit_IT>
    return;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002e34:	bf00      	nop
  }
}
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	08002f39 	.word	0x08002f39

08002e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e78:	e02c      	b.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d028      	beq.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e88:	f7fe f888 	bl	8000f9c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d21d      	bcs.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ea6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e00f      	b.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d0c3      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff ff7e 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b21      	cmp	r3, #33	; 0x21
 8002f72:	d144      	bne.n	8002ffe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d11a      	bne.n	8002fb4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f92:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	1c9a      	adds	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	621a      	str	r2, [r3, #32]
 8002fa6:	e00e      	b.n	8002fc6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	621a      	str	r2, [r3, #32]
 8002fb2:	e008      	b.n	8002fc6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	1c59      	adds	r1, r3, #1
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6211      	str	r1, [r2, #32]
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10f      	bne.n	8002ffa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003022:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff07 	bl	8002e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b22      	cmp	r3, #34	; 0x22
 800304e:	d171      	bne.n	8003134 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d123      	bne.n	80030a2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10e      	bne.n	8003086 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	1c9a      	adds	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
 8003084:	e029      	b.n	80030da <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	b29b      	uxth	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
 80030a0:	e01b      	b.n	80030da <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6858      	ldr	r0, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	1c59      	adds	r1, r3, #1
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6291      	str	r1, [r2, #40]	; 0x28
 80030ba:	b2c2      	uxtb	r2, r0
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e00c      	b.n	80030da <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	1c58      	adds	r0, r3, #1
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	6288      	str	r0, [r1, #40]	; 0x28
 80030d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4619      	mov	r1, r3
 80030e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d120      	bne.n	8003130 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0220 	bic.w	r2, r2, #32
 80030fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800310c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fc1a 	bl	8000960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e002      	b.n	8003136 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003182:	f023 030c 	bic.w	r3, r3, #12
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	430b      	orrs	r3, r1
 800318e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ae:	f040 818b 	bne.w	80034c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4ac1      	ldr	r2, [pc, #772]	; (80034bc <UART_SetConfig+0x37c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d005      	beq.n	80031c8 <UART_SetConfig+0x88>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4abf      	ldr	r2, [pc, #764]	; (80034c0 <UART_SetConfig+0x380>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	f040 80bd 	bne.w	8003342 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031c8:	f7ff f9d6 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 80031cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	461d      	mov	r5, r3
 80031d2:	f04f 0600 	mov.w	r6, #0
 80031d6:	46a8      	mov	r8, r5
 80031d8:	46b1      	mov	r9, r6
 80031da:	eb18 0308 	adds.w	r3, r8, r8
 80031de:	eb49 0409 	adc.w	r4, r9, r9
 80031e2:	4698      	mov	r8, r3
 80031e4:	46a1      	mov	r9, r4
 80031e6:	eb18 0805 	adds.w	r8, r8, r5
 80031ea:	eb49 0906 	adc.w	r9, r9, r6
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003202:	4688      	mov	r8, r1
 8003204:	4691      	mov	r9, r2
 8003206:	eb18 0005 	adds.w	r0, r8, r5
 800320a:	eb49 0106 	adc.w	r1, r9, r6
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	461d      	mov	r5, r3
 8003214:	f04f 0600 	mov.w	r6, #0
 8003218:	196b      	adds	r3, r5, r5
 800321a:	eb46 0406 	adc.w	r4, r6, r6
 800321e:	461a      	mov	r2, r3
 8003220:	4623      	mov	r3, r4
 8003222:	f7fd f82d 	bl	8000280 <__aeabi_uldivmod>
 8003226:	4603      	mov	r3, r0
 8003228:	460c      	mov	r4, r1
 800322a:	461a      	mov	r2, r3
 800322c:	4ba5      	ldr	r3, [pc, #660]	; (80034c4 <UART_SetConfig+0x384>)
 800322e:	fba3 2302 	umull	r2, r3, r3, r2
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	461d      	mov	r5, r3
 800323c:	f04f 0600 	mov.w	r6, #0
 8003240:	46a9      	mov	r9, r5
 8003242:	46b2      	mov	sl, r6
 8003244:	eb19 0309 	adds.w	r3, r9, r9
 8003248:	eb4a 040a 	adc.w	r4, sl, sl
 800324c:	4699      	mov	r9, r3
 800324e:	46a2      	mov	sl, r4
 8003250:	eb19 0905 	adds.w	r9, r9, r5
 8003254:	eb4a 0a06 	adc.w	sl, sl, r6
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003264:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003268:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800326c:	4689      	mov	r9, r1
 800326e:	4692      	mov	sl, r2
 8003270:	eb19 0005 	adds.w	r0, r9, r5
 8003274:	eb4a 0106 	adc.w	r1, sl, r6
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	461d      	mov	r5, r3
 800327e:	f04f 0600 	mov.w	r6, #0
 8003282:	196b      	adds	r3, r5, r5
 8003284:	eb46 0406 	adc.w	r4, r6, r6
 8003288:	461a      	mov	r2, r3
 800328a:	4623      	mov	r3, r4
 800328c:	f7fc fff8 	bl	8000280 <__aeabi_uldivmod>
 8003290:	4603      	mov	r3, r0
 8003292:	460c      	mov	r4, r1
 8003294:	461a      	mov	r2, r3
 8003296:	4b8b      	ldr	r3, [pc, #556]	; (80034c4 <UART_SetConfig+0x384>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2164      	movs	r1, #100	; 0x64
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	3332      	adds	r3, #50	; 0x32
 80032aa:	4a86      	ldr	r2, [pc, #536]	; (80034c4 <UART_SetConfig+0x384>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032b8:	4498      	add	r8, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	461d      	mov	r5, r3
 80032be:	f04f 0600 	mov.w	r6, #0
 80032c2:	46a9      	mov	r9, r5
 80032c4:	46b2      	mov	sl, r6
 80032c6:	eb19 0309 	adds.w	r3, r9, r9
 80032ca:	eb4a 040a 	adc.w	r4, sl, sl
 80032ce:	4699      	mov	r9, r3
 80032d0:	46a2      	mov	sl, r4
 80032d2:	eb19 0905 	adds.w	r9, r9, r5
 80032d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80032da:	f04f 0100 	mov.w	r1, #0
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032ee:	4689      	mov	r9, r1
 80032f0:	4692      	mov	sl, r2
 80032f2:	eb19 0005 	adds.w	r0, r9, r5
 80032f6:	eb4a 0106 	adc.w	r1, sl, r6
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	461d      	mov	r5, r3
 8003300:	f04f 0600 	mov.w	r6, #0
 8003304:	196b      	adds	r3, r5, r5
 8003306:	eb46 0406 	adc.w	r4, r6, r6
 800330a:	461a      	mov	r2, r3
 800330c:	4623      	mov	r3, r4
 800330e:	f7fc ffb7 	bl	8000280 <__aeabi_uldivmod>
 8003312:	4603      	mov	r3, r0
 8003314:	460c      	mov	r4, r1
 8003316:	461a      	mov	r2, r3
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <UART_SetConfig+0x384>)
 800331a:	fba3 1302 	umull	r1, r3, r3, r2
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2164      	movs	r1, #100	; 0x64
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	3332      	adds	r3, #50	; 0x32
 800332c:	4a65      	ldr	r2, [pc, #404]	; (80034c4 <UART_SetConfig+0x384>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	f003 0207 	and.w	r2, r3, #7
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4442      	add	r2, r8
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	e26f      	b.n	8003822 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003342:	f7ff f905 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003346:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	461d      	mov	r5, r3
 800334c:	f04f 0600 	mov.w	r6, #0
 8003350:	46a8      	mov	r8, r5
 8003352:	46b1      	mov	r9, r6
 8003354:	eb18 0308 	adds.w	r3, r8, r8
 8003358:	eb49 0409 	adc.w	r4, r9, r9
 800335c:	4698      	mov	r8, r3
 800335e:	46a1      	mov	r9, r4
 8003360:	eb18 0805 	adds.w	r8, r8, r5
 8003364:	eb49 0906 	adc.w	r9, r9, r6
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003374:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003378:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800337c:	4688      	mov	r8, r1
 800337e:	4691      	mov	r9, r2
 8003380:	eb18 0005 	adds.w	r0, r8, r5
 8003384:	eb49 0106 	adc.w	r1, r9, r6
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	461d      	mov	r5, r3
 800338e:	f04f 0600 	mov.w	r6, #0
 8003392:	196b      	adds	r3, r5, r5
 8003394:	eb46 0406 	adc.w	r4, r6, r6
 8003398:	461a      	mov	r2, r3
 800339a:	4623      	mov	r3, r4
 800339c:	f7fc ff70 	bl	8000280 <__aeabi_uldivmod>
 80033a0:	4603      	mov	r3, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b47      	ldr	r3, [pc, #284]	; (80034c4 <UART_SetConfig+0x384>)
 80033a8:	fba3 2302 	umull	r2, r3, r3, r2
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	461d      	mov	r5, r3
 80033b6:	f04f 0600 	mov.w	r6, #0
 80033ba:	46a9      	mov	r9, r5
 80033bc:	46b2      	mov	sl, r6
 80033be:	eb19 0309 	adds.w	r3, r9, r9
 80033c2:	eb4a 040a 	adc.w	r4, sl, sl
 80033c6:	4699      	mov	r9, r3
 80033c8:	46a2      	mov	sl, r4
 80033ca:	eb19 0905 	adds.w	r9, r9, r5
 80033ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033e6:	4689      	mov	r9, r1
 80033e8:	4692      	mov	sl, r2
 80033ea:	eb19 0005 	adds.w	r0, r9, r5
 80033ee:	eb4a 0106 	adc.w	r1, sl, r6
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	461d      	mov	r5, r3
 80033f8:	f04f 0600 	mov.w	r6, #0
 80033fc:	196b      	adds	r3, r5, r5
 80033fe:	eb46 0406 	adc.w	r4, r6, r6
 8003402:	461a      	mov	r2, r3
 8003404:	4623      	mov	r3, r4
 8003406:	f7fc ff3b 	bl	8000280 <__aeabi_uldivmod>
 800340a:	4603      	mov	r3, r0
 800340c:	460c      	mov	r4, r1
 800340e:	461a      	mov	r2, r3
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <UART_SetConfig+0x384>)
 8003412:	fba3 1302 	umull	r1, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2164      	movs	r1, #100	; 0x64
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	3332      	adds	r3, #50	; 0x32
 8003424:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <UART_SetConfig+0x384>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003432:	4498      	add	r8, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	461d      	mov	r5, r3
 8003438:	f04f 0600 	mov.w	r6, #0
 800343c:	46a9      	mov	r9, r5
 800343e:	46b2      	mov	sl, r6
 8003440:	eb19 0309 	adds.w	r3, r9, r9
 8003444:	eb4a 040a 	adc.w	r4, sl, sl
 8003448:	4699      	mov	r9, r3
 800344a:	46a2      	mov	sl, r4
 800344c:	eb19 0905 	adds.w	r9, r9, r5
 8003450:	eb4a 0a06 	adc.w	sl, sl, r6
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003468:	4689      	mov	r9, r1
 800346a:	4692      	mov	sl, r2
 800346c:	eb19 0005 	adds.w	r0, r9, r5
 8003470:	eb4a 0106 	adc.w	r1, sl, r6
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	461d      	mov	r5, r3
 800347a:	f04f 0600 	mov.w	r6, #0
 800347e:	196b      	adds	r3, r5, r5
 8003480:	eb46 0406 	adc.w	r4, r6, r6
 8003484:	461a      	mov	r2, r3
 8003486:	4623      	mov	r3, r4
 8003488:	f7fc fefa 	bl	8000280 <__aeabi_uldivmod>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	461a      	mov	r2, r3
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <UART_SetConfig+0x384>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <UART_SetConfig+0x384>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	f003 0207 	and.w	r2, r3, #7
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4442      	add	r2, r8
 80034b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80034ba:	e1b2      	b.n	8003822 <UART_SetConfig+0x6e2>
 80034bc:	40011000 	.word	0x40011000
 80034c0:	40011400 	.word	0x40011400
 80034c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4ad7      	ldr	r2, [pc, #860]	; (800382c <UART_SetConfig+0x6ec>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d005      	beq.n	80034de <UART_SetConfig+0x39e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4ad6      	ldr	r2, [pc, #856]	; (8003830 <UART_SetConfig+0x6f0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	f040 80d1 	bne.w	8003680 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80034de:	f7ff f84b 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 80034e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	469a      	mov	sl, r3
 80034e8:	f04f 0b00 	mov.w	fp, #0
 80034ec:	46d0      	mov	r8, sl
 80034ee:	46d9      	mov	r9, fp
 80034f0:	eb18 0308 	adds.w	r3, r8, r8
 80034f4:	eb49 0409 	adc.w	r4, r9, r9
 80034f8:	4698      	mov	r8, r3
 80034fa:	46a1      	mov	r9, r4
 80034fc:	eb18 080a 	adds.w	r8, r8, sl
 8003500:	eb49 090b 	adc.w	r9, r9, fp
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003510:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003514:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003518:	4688      	mov	r8, r1
 800351a:	4691      	mov	r9, r2
 800351c:	eb1a 0508 	adds.w	r5, sl, r8
 8003520:	eb4b 0609 	adc.w	r6, fp, r9
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4619      	mov	r1, r3
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	0094      	lsls	r4, r2, #2
 8003538:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800353c:	008b      	lsls	r3, r1, #2
 800353e:	461a      	mov	r2, r3
 8003540:	4623      	mov	r3, r4
 8003542:	4628      	mov	r0, r5
 8003544:	4631      	mov	r1, r6
 8003546:	f7fc fe9b 	bl	8000280 <__aeabi_uldivmod>
 800354a:	4603      	mov	r3, r0
 800354c:	460c      	mov	r4, r1
 800354e:	461a      	mov	r2, r3
 8003550:	4bb8      	ldr	r3, [pc, #736]	; (8003834 <UART_SetConfig+0x6f4>)
 8003552:	fba3 2302 	umull	r2, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	469b      	mov	fp, r3
 8003560:	f04f 0c00 	mov.w	ip, #0
 8003564:	46d9      	mov	r9, fp
 8003566:	46e2      	mov	sl, ip
 8003568:	eb19 0309 	adds.w	r3, r9, r9
 800356c:	eb4a 040a 	adc.w	r4, sl, sl
 8003570:	4699      	mov	r9, r3
 8003572:	46a2      	mov	sl, r4
 8003574:	eb19 090b 	adds.w	r9, r9, fp
 8003578:	eb4a 0a0c 	adc.w	sl, sl, ip
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003588:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800358c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003590:	4689      	mov	r9, r1
 8003592:	4692      	mov	sl, r2
 8003594:	eb1b 0509 	adds.w	r5, fp, r9
 8003598:	eb4c 060a 	adc.w	r6, ip, sl
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4619      	mov	r1, r3
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	f04f 0400 	mov.w	r4, #0
 80035ae:	0094      	lsls	r4, r2, #2
 80035b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035b4:	008b      	lsls	r3, r1, #2
 80035b6:	461a      	mov	r2, r3
 80035b8:	4623      	mov	r3, r4
 80035ba:	4628      	mov	r0, r5
 80035bc:	4631      	mov	r1, r6
 80035be:	f7fc fe5f 	bl	8000280 <__aeabi_uldivmod>
 80035c2:	4603      	mov	r3, r0
 80035c4:	460c      	mov	r4, r1
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b9a      	ldr	r3, [pc, #616]	; (8003834 <UART_SetConfig+0x6f4>)
 80035ca:	fba3 1302 	umull	r1, r3, r3, r2
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2164      	movs	r1, #100	; 0x64
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	3332      	adds	r3, #50	; 0x32
 80035dc:	4a95      	ldr	r2, [pc, #596]	; (8003834 <UART_SetConfig+0x6f4>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e8:	4498      	add	r8, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	469b      	mov	fp, r3
 80035ee:	f04f 0c00 	mov.w	ip, #0
 80035f2:	46d9      	mov	r9, fp
 80035f4:	46e2      	mov	sl, ip
 80035f6:	eb19 0309 	adds.w	r3, r9, r9
 80035fa:	eb4a 040a 	adc.w	r4, sl, sl
 80035fe:	4699      	mov	r9, r3
 8003600:	46a2      	mov	sl, r4
 8003602:	eb19 090b 	adds.w	r9, r9, fp
 8003606:	eb4a 0a0c 	adc.w	sl, sl, ip
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003616:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800361a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800361e:	4689      	mov	r9, r1
 8003620:	4692      	mov	sl, r2
 8003622:	eb1b 0509 	adds.w	r5, fp, r9
 8003626:	eb4c 060a 	adc.w	r6, ip, sl
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4619      	mov	r1, r3
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	f04f 0400 	mov.w	r4, #0
 800363c:	0094      	lsls	r4, r2, #2
 800363e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003642:	008b      	lsls	r3, r1, #2
 8003644:	461a      	mov	r2, r3
 8003646:	4623      	mov	r3, r4
 8003648:	4628      	mov	r0, r5
 800364a:	4631      	mov	r1, r6
 800364c:	f7fc fe18 	bl	8000280 <__aeabi_uldivmod>
 8003650:	4603      	mov	r3, r0
 8003652:	460c      	mov	r4, r1
 8003654:	461a      	mov	r2, r3
 8003656:	4b77      	ldr	r3, [pc, #476]	; (8003834 <UART_SetConfig+0x6f4>)
 8003658:	fba3 1302 	umull	r1, r3, r3, r2
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	2164      	movs	r1, #100	; 0x64
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	3332      	adds	r3, #50	; 0x32
 800366a:	4a72      	ldr	r2, [pc, #456]	; (8003834 <UART_SetConfig+0x6f4>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	f003 020f 	and.w	r2, r3, #15
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4442      	add	r2, r8
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	e0d0      	b.n	8003822 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003680:	f7fe ff66 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003684:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	469a      	mov	sl, r3
 800368a:	f04f 0b00 	mov.w	fp, #0
 800368e:	46d0      	mov	r8, sl
 8003690:	46d9      	mov	r9, fp
 8003692:	eb18 0308 	adds.w	r3, r8, r8
 8003696:	eb49 0409 	adc.w	r4, r9, r9
 800369a:	4698      	mov	r8, r3
 800369c:	46a1      	mov	r9, r4
 800369e:	eb18 080a 	adds.w	r8, r8, sl
 80036a2:	eb49 090b 	adc.w	r9, r9, fp
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036ba:	4688      	mov	r8, r1
 80036bc:	4691      	mov	r9, r2
 80036be:	eb1a 0508 	adds.w	r5, sl, r8
 80036c2:	eb4b 0609 	adc.w	r6, fp, r9
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4619      	mov	r1, r3
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	f04f 0400 	mov.w	r4, #0
 80036d8:	0094      	lsls	r4, r2, #2
 80036da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036de:	008b      	lsls	r3, r1, #2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4623      	mov	r3, r4
 80036e4:	4628      	mov	r0, r5
 80036e6:	4631      	mov	r1, r6
 80036e8:	f7fc fdca 	bl	8000280 <__aeabi_uldivmod>
 80036ec:	4603      	mov	r3, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b50      	ldr	r3, [pc, #320]	; (8003834 <UART_SetConfig+0x6f4>)
 80036f4:	fba3 2302 	umull	r2, r3, r3, r2
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	469b      	mov	fp, r3
 8003702:	f04f 0c00 	mov.w	ip, #0
 8003706:	46d9      	mov	r9, fp
 8003708:	46e2      	mov	sl, ip
 800370a:	eb19 0309 	adds.w	r3, r9, r9
 800370e:	eb4a 040a 	adc.w	r4, sl, sl
 8003712:	4699      	mov	r9, r3
 8003714:	46a2      	mov	sl, r4
 8003716:	eb19 090b 	adds.w	r9, r9, fp
 800371a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800371e:	f04f 0100 	mov.w	r1, #0
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800372a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800372e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003732:	4689      	mov	r9, r1
 8003734:	4692      	mov	sl, r2
 8003736:	eb1b 0509 	adds.w	r5, fp, r9
 800373a:	eb4c 060a 	adc.w	r6, ip, sl
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4619      	mov	r1, r3
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	f04f 0400 	mov.w	r4, #0
 8003750:	0094      	lsls	r4, r2, #2
 8003752:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003756:	008b      	lsls	r3, r1, #2
 8003758:	461a      	mov	r2, r3
 800375a:	4623      	mov	r3, r4
 800375c:	4628      	mov	r0, r5
 800375e:	4631      	mov	r1, r6
 8003760:	f7fc fd8e 	bl	8000280 <__aeabi_uldivmod>
 8003764:	4603      	mov	r3, r0
 8003766:	460c      	mov	r4, r1
 8003768:	461a      	mov	r2, r3
 800376a:	4b32      	ldr	r3, [pc, #200]	; (8003834 <UART_SetConfig+0x6f4>)
 800376c:	fba3 1302 	umull	r1, r3, r3, r2
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	2164      	movs	r1, #100	; 0x64
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	3332      	adds	r3, #50	; 0x32
 800377e:	4a2d      	ldr	r2, [pc, #180]	; (8003834 <UART_SetConfig+0x6f4>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378a:	4498      	add	r8, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	469b      	mov	fp, r3
 8003790:	f04f 0c00 	mov.w	ip, #0
 8003794:	46d9      	mov	r9, fp
 8003796:	46e2      	mov	sl, ip
 8003798:	eb19 0309 	adds.w	r3, r9, r9
 800379c:	eb4a 040a 	adc.w	r4, sl, sl
 80037a0:	4699      	mov	r9, r3
 80037a2:	46a2      	mov	sl, r4
 80037a4:	eb19 090b 	adds.w	r9, r9, fp
 80037a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037c0:	4689      	mov	r9, r1
 80037c2:	4692      	mov	sl, r2
 80037c4:	eb1b 0509 	adds.w	r5, fp, r9
 80037c8:	eb4c 060a 	adc.w	r6, ip, sl
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4619      	mov	r1, r3
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	f04f 0400 	mov.w	r4, #0
 80037de:	0094      	lsls	r4, r2, #2
 80037e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037e4:	008b      	lsls	r3, r1, #2
 80037e6:	461a      	mov	r2, r3
 80037e8:	4623      	mov	r3, r4
 80037ea:	4628      	mov	r0, r5
 80037ec:	4631      	mov	r1, r6
 80037ee:	f7fc fd47 	bl	8000280 <__aeabi_uldivmod>
 80037f2:	4603      	mov	r3, r0
 80037f4:	460c      	mov	r4, r1
 80037f6:	461a      	mov	r2, r3
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <UART_SetConfig+0x6f4>)
 80037fa:	fba3 1302 	umull	r1, r3, r3, r2
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2164      	movs	r1, #100	; 0x64
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	3332      	adds	r3, #50	; 0x32
 800380c:	4a09      	ldr	r2, [pc, #36]	; (8003834 <UART_SetConfig+0x6f4>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4442      	add	r2, r8
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	e7ff      	b.n	8003822 <UART_SetConfig+0x6e2>
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382c:	40011000 	.word	0x40011000
 8003830:	40011400 	.word	0x40011400
 8003834:	51eb851f 	.word	0x51eb851f

08003838 <__errno>:
 8003838:	4b01      	ldr	r3, [pc, #4]	; (8003840 <__errno+0x8>)
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000014 	.word	0x20000014

08003844 <__libc_init_array>:
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	4e0d      	ldr	r6, [pc, #52]	; (800387c <__libc_init_array+0x38>)
 8003848:	4c0d      	ldr	r4, [pc, #52]	; (8003880 <__libc_init_array+0x3c>)
 800384a:	1ba4      	subs	r4, r4, r6
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	2500      	movs	r5, #0
 8003850:	42a5      	cmp	r5, r4
 8003852:	d109      	bne.n	8003868 <__libc_init_array+0x24>
 8003854:	4e0b      	ldr	r6, [pc, #44]	; (8003884 <__libc_init_array+0x40>)
 8003856:	4c0c      	ldr	r4, [pc, #48]	; (8003888 <__libc_init_array+0x44>)
 8003858:	f000 fc26 	bl	80040a8 <_init>
 800385c:	1ba4      	subs	r4, r4, r6
 800385e:	10a4      	asrs	r4, r4, #2
 8003860:	2500      	movs	r5, #0
 8003862:	42a5      	cmp	r5, r4
 8003864:	d105      	bne.n	8003872 <__libc_init_array+0x2e>
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800386c:	4798      	blx	r3
 800386e:	3501      	adds	r5, #1
 8003870:	e7ee      	b.n	8003850 <__libc_init_array+0xc>
 8003872:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003876:	4798      	blx	r3
 8003878:	3501      	adds	r5, #1
 800387a:	e7f2      	b.n	8003862 <__libc_init_array+0x1e>
 800387c:	08004118 	.word	0x08004118
 8003880:	08004118 	.word	0x08004118
 8003884:	08004118 	.word	0x08004118
 8003888:	0800411c 	.word	0x0800411c

0800388c <memset>:
 800388c:	4402      	add	r2, r0
 800388e:	4603      	mov	r3, r0
 8003890:	4293      	cmp	r3, r2
 8003892:	d100      	bne.n	8003896 <memset+0xa>
 8003894:	4770      	bx	lr
 8003896:	f803 1b01 	strb.w	r1, [r3], #1
 800389a:	e7f9      	b.n	8003890 <memset+0x4>

0800389c <siprintf>:
 800389c:	b40e      	push	{r1, r2, r3}
 800389e:	b500      	push	{lr}
 80038a0:	b09c      	sub	sp, #112	; 0x70
 80038a2:	ab1d      	add	r3, sp, #116	; 0x74
 80038a4:	9002      	str	r0, [sp, #8]
 80038a6:	9006      	str	r0, [sp, #24]
 80038a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038ac:	4809      	ldr	r0, [pc, #36]	; (80038d4 <siprintf+0x38>)
 80038ae:	9107      	str	r1, [sp, #28]
 80038b0:	9104      	str	r1, [sp, #16]
 80038b2:	4909      	ldr	r1, [pc, #36]	; (80038d8 <siprintf+0x3c>)
 80038b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038b8:	9105      	str	r1, [sp, #20]
 80038ba:	6800      	ldr	r0, [r0, #0]
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	a902      	add	r1, sp, #8
 80038c0:	f000 f866 	bl	8003990 <_svfiprintf_r>
 80038c4:	9b02      	ldr	r3, [sp, #8]
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	b01c      	add	sp, #112	; 0x70
 80038cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038d0:	b003      	add	sp, #12
 80038d2:	4770      	bx	lr
 80038d4:	20000014 	.word	0x20000014
 80038d8:	ffff0208 	.word	0xffff0208

080038dc <__ssputs_r>:
 80038dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	688e      	ldr	r6, [r1, #8]
 80038e2:	429e      	cmp	r6, r3
 80038e4:	4682      	mov	sl, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	4690      	mov	r8, r2
 80038ea:	4699      	mov	r9, r3
 80038ec:	d837      	bhi.n	800395e <__ssputs_r+0x82>
 80038ee:	898a      	ldrh	r2, [r1, #12]
 80038f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038f4:	d031      	beq.n	800395a <__ssputs_r+0x7e>
 80038f6:	6825      	ldr	r5, [r4, #0]
 80038f8:	6909      	ldr	r1, [r1, #16]
 80038fa:	1a6f      	subs	r7, r5, r1
 80038fc:	6965      	ldr	r5, [r4, #20]
 80038fe:	2302      	movs	r3, #2
 8003900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003904:	fb95 f5f3 	sdiv	r5, r5, r3
 8003908:	f109 0301 	add.w	r3, r9, #1
 800390c:	443b      	add	r3, r7
 800390e:	429d      	cmp	r5, r3
 8003910:	bf38      	it	cc
 8003912:	461d      	movcc	r5, r3
 8003914:	0553      	lsls	r3, r2, #21
 8003916:	d530      	bpl.n	800397a <__ssputs_r+0x9e>
 8003918:	4629      	mov	r1, r5
 800391a:	f000 fb2b 	bl	8003f74 <_malloc_r>
 800391e:	4606      	mov	r6, r0
 8003920:	b950      	cbnz	r0, 8003938 <__ssputs_r+0x5c>
 8003922:	230c      	movs	r3, #12
 8003924:	f8ca 3000 	str.w	r3, [sl]
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392e:	81a3      	strh	r3, [r4, #12]
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003938:	463a      	mov	r2, r7
 800393a:	6921      	ldr	r1, [r4, #16]
 800393c:	f000 faa8 	bl	8003e90 <memcpy>
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394a:	81a3      	strh	r3, [r4, #12]
 800394c:	6126      	str	r6, [r4, #16]
 800394e:	6165      	str	r5, [r4, #20]
 8003950:	443e      	add	r6, r7
 8003952:	1bed      	subs	r5, r5, r7
 8003954:	6026      	str	r6, [r4, #0]
 8003956:	60a5      	str	r5, [r4, #8]
 8003958:	464e      	mov	r6, r9
 800395a:	454e      	cmp	r6, r9
 800395c:	d900      	bls.n	8003960 <__ssputs_r+0x84>
 800395e:	464e      	mov	r6, r9
 8003960:	4632      	mov	r2, r6
 8003962:	4641      	mov	r1, r8
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	f000 fa9e 	bl	8003ea6 <memmove>
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	1b9b      	subs	r3, r3, r6
 800396e:	60a3      	str	r3, [r4, #8]
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	441e      	add	r6, r3
 8003974:	6026      	str	r6, [r4, #0]
 8003976:	2000      	movs	r0, #0
 8003978:	e7dc      	b.n	8003934 <__ssputs_r+0x58>
 800397a:	462a      	mov	r2, r5
 800397c:	f000 fb54 	bl	8004028 <_realloc_r>
 8003980:	4606      	mov	r6, r0
 8003982:	2800      	cmp	r0, #0
 8003984:	d1e2      	bne.n	800394c <__ssputs_r+0x70>
 8003986:	6921      	ldr	r1, [r4, #16]
 8003988:	4650      	mov	r0, sl
 800398a:	f000 faa5 	bl	8003ed8 <_free_r>
 800398e:	e7c8      	b.n	8003922 <__ssputs_r+0x46>

08003990 <_svfiprintf_r>:
 8003990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003994:	461d      	mov	r5, r3
 8003996:	898b      	ldrh	r3, [r1, #12]
 8003998:	061f      	lsls	r7, r3, #24
 800399a:	b09d      	sub	sp, #116	; 0x74
 800399c:	4680      	mov	r8, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	4616      	mov	r6, r2
 80039a2:	d50f      	bpl.n	80039c4 <_svfiprintf_r+0x34>
 80039a4:	690b      	ldr	r3, [r1, #16]
 80039a6:	b96b      	cbnz	r3, 80039c4 <_svfiprintf_r+0x34>
 80039a8:	2140      	movs	r1, #64	; 0x40
 80039aa:	f000 fae3 	bl	8003f74 <_malloc_r>
 80039ae:	6020      	str	r0, [r4, #0]
 80039b0:	6120      	str	r0, [r4, #16]
 80039b2:	b928      	cbnz	r0, 80039c0 <_svfiprintf_r+0x30>
 80039b4:	230c      	movs	r3, #12
 80039b6:	f8c8 3000 	str.w	r3, [r8]
 80039ba:	f04f 30ff 	mov.w	r0, #4294967295
 80039be:	e0c8      	b.n	8003b52 <_svfiprintf_r+0x1c2>
 80039c0:	2340      	movs	r3, #64	; 0x40
 80039c2:	6163      	str	r3, [r4, #20]
 80039c4:	2300      	movs	r3, #0
 80039c6:	9309      	str	r3, [sp, #36]	; 0x24
 80039c8:	2320      	movs	r3, #32
 80039ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ce:	2330      	movs	r3, #48	; 0x30
 80039d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039d4:	9503      	str	r5, [sp, #12]
 80039d6:	f04f 0b01 	mov.w	fp, #1
 80039da:	4637      	mov	r7, r6
 80039dc:	463d      	mov	r5, r7
 80039de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039e2:	b10b      	cbz	r3, 80039e8 <_svfiprintf_r+0x58>
 80039e4:	2b25      	cmp	r3, #37	; 0x25
 80039e6:	d13e      	bne.n	8003a66 <_svfiprintf_r+0xd6>
 80039e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80039ec:	d00b      	beq.n	8003a06 <_svfiprintf_r+0x76>
 80039ee:	4653      	mov	r3, sl
 80039f0:	4632      	mov	r2, r6
 80039f2:	4621      	mov	r1, r4
 80039f4:	4640      	mov	r0, r8
 80039f6:	f7ff ff71 	bl	80038dc <__ssputs_r>
 80039fa:	3001      	adds	r0, #1
 80039fc:	f000 80a4 	beq.w	8003b48 <_svfiprintf_r+0x1b8>
 8003a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a02:	4453      	add	r3, sl
 8003a04:	9309      	str	r3, [sp, #36]	; 0x24
 8003a06:	783b      	ldrb	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 809d 	beq.w	8003b48 <_svfiprintf_r+0x1b8>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295
 8003a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a18:	9304      	str	r3, [sp, #16]
 8003a1a:	9307      	str	r3, [sp, #28]
 8003a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a20:	931a      	str	r3, [sp, #104]	; 0x68
 8003a22:	462f      	mov	r7, r5
 8003a24:	2205      	movs	r2, #5
 8003a26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a2a:	4850      	ldr	r0, [pc, #320]	; (8003b6c <_svfiprintf_r+0x1dc>)
 8003a2c:	f7fc fbd8 	bl	80001e0 <memchr>
 8003a30:	9b04      	ldr	r3, [sp, #16]
 8003a32:	b9d0      	cbnz	r0, 8003a6a <_svfiprintf_r+0xda>
 8003a34:	06d9      	lsls	r1, r3, #27
 8003a36:	bf44      	itt	mi
 8003a38:	2220      	movmi	r2, #32
 8003a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a3e:	071a      	lsls	r2, r3, #28
 8003a40:	bf44      	itt	mi
 8003a42:	222b      	movmi	r2, #43	; 0x2b
 8003a44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a48:	782a      	ldrb	r2, [r5, #0]
 8003a4a:	2a2a      	cmp	r2, #42	; 0x2a
 8003a4c:	d015      	beq.n	8003a7a <_svfiprintf_r+0xea>
 8003a4e:	9a07      	ldr	r2, [sp, #28]
 8003a50:	462f      	mov	r7, r5
 8003a52:	2000      	movs	r0, #0
 8003a54:	250a      	movs	r5, #10
 8003a56:	4639      	mov	r1, r7
 8003a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a5c:	3b30      	subs	r3, #48	; 0x30
 8003a5e:	2b09      	cmp	r3, #9
 8003a60:	d94d      	bls.n	8003afe <_svfiprintf_r+0x16e>
 8003a62:	b1b8      	cbz	r0, 8003a94 <_svfiprintf_r+0x104>
 8003a64:	e00f      	b.n	8003a86 <_svfiprintf_r+0xf6>
 8003a66:	462f      	mov	r7, r5
 8003a68:	e7b8      	b.n	80039dc <_svfiprintf_r+0x4c>
 8003a6a:	4a40      	ldr	r2, [pc, #256]	; (8003b6c <_svfiprintf_r+0x1dc>)
 8003a6c:	1a80      	subs	r0, r0, r2
 8003a6e:	fa0b f000 	lsl.w	r0, fp, r0
 8003a72:	4318      	orrs	r0, r3
 8003a74:	9004      	str	r0, [sp, #16]
 8003a76:	463d      	mov	r5, r7
 8003a78:	e7d3      	b.n	8003a22 <_svfiprintf_r+0x92>
 8003a7a:	9a03      	ldr	r2, [sp, #12]
 8003a7c:	1d11      	adds	r1, r2, #4
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	9103      	str	r1, [sp, #12]
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	db01      	blt.n	8003a8a <_svfiprintf_r+0xfa>
 8003a86:	9207      	str	r2, [sp, #28]
 8003a88:	e004      	b.n	8003a94 <_svfiprintf_r+0x104>
 8003a8a:	4252      	negs	r2, r2
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	9207      	str	r2, [sp, #28]
 8003a92:	9304      	str	r3, [sp, #16]
 8003a94:	783b      	ldrb	r3, [r7, #0]
 8003a96:	2b2e      	cmp	r3, #46	; 0x2e
 8003a98:	d10c      	bne.n	8003ab4 <_svfiprintf_r+0x124>
 8003a9a:	787b      	ldrb	r3, [r7, #1]
 8003a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a9e:	d133      	bne.n	8003b08 <_svfiprintf_r+0x178>
 8003aa0:	9b03      	ldr	r3, [sp, #12]
 8003aa2:	1d1a      	adds	r2, r3, #4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	9203      	str	r2, [sp, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bfb8      	it	lt
 8003aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ab0:	3702      	adds	r7, #2
 8003ab2:	9305      	str	r3, [sp, #20]
 8003ab4:	4d2e      	ldr	r5, [pc, #184]	; (8003b70 <_svfiprintf_r+0x1e0>)
 8003ab6:	7839      	ldrb	r1, [r7, #0]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	4628      	mov	r0, r5
 8003abc:	f7fc fb90 	bl	80001e0 <memchr>
 8003ac0:	b138      	cbz	r0, 8003ad2 <_svfiprintf_r+0x142>
 8003ac2:	2340      	movs	r3, #64	; 0x40
 8003ac4:	1b40      	subs	r0, r0, r5
 8003ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8003aca:	9b04      	ldr	r3, [sp, #16]
 8003acc:	4303      	orrs	r3, r0
 8003ace:	3701      	adds	r7, #1
 8003ad0:	9304      	str	r3, [sp, #16]
 8003ad2:	7839      	ldrb	r1, [r7, #0]
 8003ad4:	4827      	ldr	r0, [pc, #156]	; (8003b74 <_svfiprintf_r+0x1e4>)
 8003ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ada:	2206      	movs	r2, #6
 8003adc:	1c7e      	adds	r6, r7, #1
 8003ade:	f7fc fb7f 	bl	80001e0 <memchr>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d038      	beq.n	8003b58 <_svfiprintf_r+0x1c8>
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <_svfiprintf_r+0x1e8>)
 8003ae8:	bb13      	cbnz	r3, 8003b30 <_svfiprintf_r+0x1a0>
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	3307      	adds	r3, #7
 8003aee:	f023 0307 	bic.w	r3, r3, #7
 8003af2:	3308      	adds	r3, #8
 8003af4:	9303      	str	r3, [sp, #12]
 8003af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af8:	444b      	add	r3, r9
 8003afa:	9309      	str	r3, [sp, #36]	; 0x24
 8003afc:	e76d      	b.n	80039da <_svfiprintf_r+0x4a>
 8003afe:	fb05 3202 	mla	r2, r5, r2, r3
 8003b02:	2001      	movs	r0, #1
 8003b04:	460f      	mov	r7, r1
 8003b06:	e7a6      	b.n	8003a56 <_svfiprintf_r+0xc6>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	3701      	adds	r7, #1
 8003b0c:	9305      	str	r3, [sp, #20]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	250a      	movs	r5, #10
 8003b12:	4638      	mov	r0, r7
 8003b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b18:	3a30      	subs	r2, #48	; 0x30
 8003b1a:	2a09      	cmp	r2, #9
 8003b1c:	d903      	bls.n	8003b26 <_svfiprintf_r+0x196>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0c8      	beq.n	8003ab4 <_svfiprintf_r+0x124>
 8003b22:	9105      	str	r1, [sp, #20]
 8003b24:	e7c6      	b.n	8003ab4 <_svfiprintf_r+0x124>
 8003b26:	fb05 2101 	mla	r1, r5, r1, r2
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	4607      	mov	r7, r0
 8003b2e:	e7f0      	b.n	8003b12 <_svfiprintf_r+0x182>
 8003b30:	ab03      	add	r3, sp, #12
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4622      	mov	r2, r4
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <_svfiprintf_r+0x1ec>)
 8003b38:	a904      	add	r1, sp, #16
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	f3af 8000 	nop.w
 8003b40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b44:	4681      	mov	r9, r0
 8003b46:	d1d6      	bne.n	8003af6 <_svfiprintf_r+0x166>
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	065b      	lsls	r3, r3, #25
 8003b4c:	f53f af35 	bmi.w	80039ba <_svfiprintf_r+0x2a>
 8003b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b52:	b01d      	add	sp, #116	; 0x74
 8003b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b58:	ab03      	add	r3, sp, #12
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4622      	mov	r2, r4
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <_svfiprintf_r+0x1ec>)
 8003b60:	a904      	add	r1, sp, #16
 8003b62:	4640      	mov	r0, r8
 8003b64:	f000 f882 	bl	8003c6c <_printf_i>
 8003b68:	e7ea      	b.n	8003b40 <_svfiprintf_r+0x1b0>
 8003b6a:	bf00      	nop
 8003b6c:	080040dc 	.word	0x080040dc
 8003b70:	080040e2 	.word	0x080040e2
 8003b74:	080040e6 	.word	0x080040e6
 8003b78:	00000000 	.word	0x00000000
 8003b7c:	080038dd 	.word	0x080038dd

08003b80 <_printf_common>:
 8003b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b84:	4691      	mov	r9, r2
 8003b86:	461f      	mov	r7, r3
 8003b88:	688a      	ldr	r2, [r1, #8]
 8003b8a:	690b      	ldr	r3, [r1, #16]
 8003b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bfb8      	it	lt
 8003b94:	4613      	movlt	r3, r2
 8003b96:	f8c9 3000 	str.w	r3, [r9]
 8003b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b9e:	4606      	mov	r6, r0
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	b112      	cbz	r2, 8003baa <_printf_common+0x2a>
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f8c9 3000 	str.w	r3, [r9]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	0699      	lsls	r1, r3, #26
 8003bae:	bf42      	ittt	mi
 8003bb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003bb4:	3302      	addmi	r3, #2
 8003bb6:	f8c9 3000 	strmi.w	r3, [r9]
 8003bba:	6825      	ldr	r5, [r4, #0]
 8003bbc:	f015 0506 	ands.w	r5, r5, #6
 8003bc0:	d107      	bne.n	8003bd2 <_printf_common+0x52>
 8003bc2:	f104 0a19 	add.w	sl, r4, #25
 8003bc6:	68e3      	ldr	r3, [r4, #12]
 8003bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	42ab      	cmp	r3, r5
 8003bd0:	dc28      	bgt.n	8003c24 <_printf_common+0xa4>
 8003bd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	3300      	adds	r3, #0
 8003bda:	bf18      	it	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	0692      	lsls	r2, r2, #26
 8003be0:	d42d      	bmi.n	8003c3e <_printf_common+0xbe>
 8003be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be6:	4639      	mov	r1, r7
 8003be8:	4630      	mov	r0, r6
 8003bea:	47c0      	blx	r8
 8003bec:	3001      	adds	r0, #1
 8003bee:	d020      	beq.n	8003c32 <_printf_common+0xb2>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	68e5      	ldr	r5, [r4, #12]
 8003bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8003bf8:	f003 0306 	and.w	r3, r3, #6
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	bf08      	it	eq
 8003c00:	1aad      	subeq	r5, r5, r2
 8003c02:	68a3      	ldr	r3, [r4, #8]
 8003c04:	6922      	ldr	r2, [r4, #16]
 8003c06:	bf0c      	ite	eq
 8003c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c0c:	2500      	movne	r5, #0
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	bfc4      	itt	gt
 8003c12:	1a9b      	subgt	r3, r3, r2
 8003c14:	18ed      	addgt	r5, r5, r3
 8003c16:	f04f 0900 	mov.w	r9, #0
 8003c1a:	341a      	adds	r4, #26
 8003c1c:	454d      	cmp	r5, r9
 8003c1e:	d11a      	bne.n	8003c56 <_printf_common+0xd6>
 8003c20:	2000      	movs	r0, #0
 8003c22:	e008      	b.n	8003c36 <_printf_common+0xb6>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4652      	mov	r2, sl
 8003c28:	4639      	mov	r1, r7
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	47c0      	blx	r8
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d103      	bne.n	8003c3a <_printf_common+0xba>
 8003c32:	f04f 30ff 	mov.w	r0, #4294967295
 8003c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3a:	3501      	adds	r5, #1
 8003c3c:	e7c3      	b.n	8003bc6 <_printf_common+0x46>
 8003c3e:	18e1      	adds	r1, r4, r3
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	2030      	movs	r0, #48	; 0x30
 8003c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c48:	4422      	add	r2, r4
 8003c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c52:	3302      	adds	r3, #2
 8003c54:	e7c5      	b.n	8003be2 <_printf_common+0x62>
 8003c56:	2301      	movs	r3, #1
 8003c58:	4622      	mov	r2, r4
 8003c5a:	4639      	mov	r1, r7
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	47c0      	blx	r8
 8003c60:	3001      	adds	r0, #1
 8003c62:	d0e6      	beq.n	8003c32 <_printf_common+0xb2>
 8003c64:	f109 0901 	add.w	r9, r9, #1
 8003c68:	e7d8      	b.n	8003c1c <_printf_common+0x9c>
	...

08003c6c <_printf_i>:
 8003c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c74:	460c      	mov	r4, r1
 8003c76:	7e09      	ldrb	r1, [r1, #24]
 8003c78:	b085      	sub	sp, #20
 8003c7a:	296e      	cmp	r1, #110	; 0x6e
 8003c7c:	4617      	mov	r7, r2
 8003c7e:	4606      	mov	r6, r0
 8003c80:	4698      	mov	r8, r3
 8003c82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c84:	f000 80b3 	beq.w	8003dee <_printf_i+0x182>
 8003c88:	d822      	bhi.n	8003cd0 <_printf_i+0x64>
 8003c8a:	2963      	cmp	r1, #99	; 0x63
 8003c8c:	d036      	beq.n	8003cfc <_printf_i+0x90>
 8003c8e:	d80a      	bhi.n	8003ca6 <_printf_i+0x3a>
 8003c90:	2900      	cmp	r1, #0
 8003c92:	f000 80b9 	beq.w	8003e08 <_printf_i+0x19c>
 8003c96:	2958      	cmp	r1, #88	; 0x58
 8003c98:	f000 8083 	beq.w	8003da2 <_printf_i+0x136>
 8003c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ca4:	e032      	b.n	8003d0c <_printf_i+0xa0>
 8003ca6:	2964      	cmp	r1, #100	; 0x64
 8003ca8:	d001      	beq.n	8003cae <_printf_i+0x42>
 8003caa:	2969      	cmp	r1, #105	; 0x69
 8003cac:	d1f6      	bne.n	8003c9c <_printf_i+0x30>
 8003cae:	6820      	ldr	r0, [r4, #0]
 8003cb0:	6813      	ldr	r3, [r2, #0]
 8003cb2:	0605      	lsls	r5, r0, #24
 8003cb4:	f103 0104 	add.w	r1, r3, #4
 8003cb8:	d52a      	bpl.n	8003d10 <_printf_i+0xa4>
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6011      	str	r1, [r2, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da03      	bge.n	8003cca <_printf_i+0x5e>
 8003cc2:	222d      	movs	r2, #45	; 0x2d
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003cca:	486f      	ldr	r0, [pc, #444]	; (8003e88 <_printf_i+0x21c>)
 8003ccc:	220a      	movs	r2, #10
 8003cce:	e039      	b.n	8003d44 <_printf_i+0xd8>
 8003cd0:	2973      	cmp	r1, #115	; 0x73
 8003cd2:	f000 809d 	beq.w	8003e10 <_printf_i+0x1a4>
 8003cd6:	d808      	bhi.n	8003cea <_printf_i+0x7e>
 8003cd8:	296f      	cmp	r1, #111	; 0x6f
 8003cda:	d020      	beq.n	8003d1e <_printf_i+0xb2>
 8003cdc:	2970      	cmp	r1, #112	; 0x70
 8003cde:	d1dd      	bne.n	8003c9c <_printf_i+0x30>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	f043 0320 	orr.w	r3, r3, #32
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	e003      	b.n	8003cf2 <_printf_i+0x86>
 8003cea:	2975      	cmp	r1, #117	; 0x75
 8003cec:	d017      	beq.n	8003d1e <_printf_i+0xb2>
 8003cee:	2978      	cmp	r1, #120	; 0x78
 8003cf0:	d1d4      	bne.n	8003c9c <_printf_i+0x30>
 8003cf2:	2378      	movs	r3, #120	; 0x78
 8003cf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cf8:	4864      	ldr	r0, [pc, #400]	; (8003e8c <_printf_i+0x220>)
 8003cfa:	e055      	b.n	8003da8 <_printf_i+0x13c>
 8003cfc:	6813      	ldr	r3, [r2, #0]
 8003cfe:	1d19      	adds	r1, r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6011      	str	r1, [r2, #0]
 8003d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e08c      	b.n	8003e2a <_printf_i+0x1be>
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6011      	str	r1, [r2, #0]
 8003d14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d18:	bf18      	it	ne
 8003d1a:	b21b      	sxthne	r3, r3
 8003d1c:	e7cf      	b.n	8003cbe <_printf_i+0x52>
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	6825      	ldr	r5, [r4, #0]
 8003d22:	1d18      	adds	r0, r3, #4
 8003d24:	6010      	str	r0, [r2, #0]
 8003d26:	0628      	lsls	r0, r5, #24
 8003d28:	d501      	bpl.n	8003d2e <_printf_i+0xc2>
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	e002      	b.n	8003d34 <_printf_i+0xc8>
 8003d2e:	0668      	lsls	r0, r5, #25
 8003d30:	d5fb      	bpl.n	8003d2a <_printf_i+0xbe>
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	4854      	ldr	r0, [pc, #336]	; (8003e88 <_printf_i+0x21c>)
 8003d36:	296f      	cmp	r1, #111	; 0x6f
 8003d38:	bf14      	ite	ne
 8003d3a:	220a      	movne	r2, #10
 8003d3c:	2208      	moveq	r2, #8
 8003d3e:	2100      	movs	r1, #0
 8003d40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d44:	6865      	ldr	r5, [r4, #4]
 8003d46:	60a5      	str	r5, [r4, #8]
 8003d48:	2d00      	cmp	r5, #0
 8003d4a:	f2c0 8095 	blt.w	8003e78 <_printf_i+0x20c>
 8003d4e:	6821      	ldr	r1, [r4, #0]
 8003d50:	f021 0104 	bic.w	r1, r1, #4
 8003d54:	6021      	str	r1, [r4, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d13d      	bne.n	8003dd6 <_printf_i+0x16a>
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	f040 808e 	bne.w	8003e7c <_printf_i+0x210>
 8003d60:	4665      	mov	r5, ip
 8003d62:	2a08      	cmp	r2, #8
 8003d64:	d10b      	bne.n	8003d7e <_printf_i+0x112>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	07db      	lsls	r3, r3, #31
 8003d6a:	d508      	bpl.n	8003d7e <_printf_i+0x112>
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	6862      	ldr	r2, [r4, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	bfde      	ittt	le
 8003d74:	2330      	movle	r3, #48	; 0x30
 8003d76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d7e:	ebac 0305 	sub.w	r3, ip, r5
 8003d82:	6123      	str	r3, [r4, #16]
 8003d84:	f8cd 8000 	str.w	r8, [sp]
 8003d88:	463b      	mov	r3, r7
 8003d8a:	aa03      	add	r2, sp, #12
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f7ff fef6 	bl	8003b80 <_printf_common>
 8003d94:	3001      	adds	r0, #1
 8003d96:	d14d      	bne.n	8003e34 <_printf_i+0x1c8>
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	b005      	add	sp, #20
 8003d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003da2:	4839      	ldr	r0, [pc, #228]	; (8003e88 <_printf_i+0x21c>)
 8003da4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003da8:	6813      	ldr	r3, [r2, #0]
 8003daa:	6821      	ldr	r1, [r4, #0]
 8003dac:	1d1d      	adds	r5, r3, #4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6015      	str	r5, [r2, #0]
 8003db2:	060a      	lsls	r2, r1, #24
 8003db4:	d50b      	bpl.n	8003dce <_printf_i+0x162>
 8003db6:	07ca      	lsls	r2, r1, #31
 8003db8:	bf44      	itt	mi
 8003dba:	f041 0120 	orrmi.w	r1, r1, #32
 8003dbe:	6021      	strmi	r1, [r4, #0]
 8003dc0:	b91b      	cbnz	r3, 8003dca <_printf_i+0x15e>
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	f022 0220 	bic.w	r2, r2, #32
 8003dc8:	6022      	str	r2, [r4, #0]
 8003dca:	2210      	movs	r2, #16
 8003dcc:	e7b7      	b.n	8003d3e <_printf_i+0xd2>
 8003dce:	064d      	lsls	r5, r1, #25
 8003dd0:	bf48      	it	mi
 8003dd2:	b29b      	uxthmi	r3, r3
 8003dd4:	e7ef      	b.n	8003db6 <_printf_i+0x14a>
 8003dd6:	4665      	mov	r5, ip
 8003dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ddc:	fb02 3311 	mls	r3, r2, r1, r3
 8003de0:	5cc3      	ldrb	r3, [r0, r3]
 8003de2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003de6:	460b      	mov	r3, r1
 8003de8:	2900      	cmp	r1, #0
 8003dea:	d1f5      	bne.n	8003dd8 <_printf_i+0x16c>
 8003dec:	e7b9      	b.n	8003d62 <_printf_i+0xf6>
 8003dee:	6813      	ldr	r3, [r2, #0]
 8003df0:	6825      	ldr	r5, [r4, #0]
 8003df2:	6961      	ldr	r1, [r4, #20]
 8003df4:	1d18      	adds	r0, r3, #4
 8003df6:	6010      	str	r0, [r2, #0]
 8003df8:	0628      	lsls	r0, r5, #24
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	d501      	bpl.n	8003e02 <_printf_i+0x196>
 8003dfe:	6019      	str	r1, [r3, #0]
 8003e00:	e002      	b.n	8003e08 <_printf_i+0x19c>
 8003e02:	066a      	lsls	r2, r5, #25
 8003e04:	d5fb      	bpl.n	8003dfe <_printf_i+0x192>
 8003e06:	8019      	strh	r1, [r3, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6123      	str	r3, [r4, #16]
 8003e0c:	4665      	mov	r5, ip
 8003e0e:	e7b9      	b.n	8003d84 <_printf_i+0x118>
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	1d19      	adds	r1, r3, #4
 8003e14:	6011      	str	r1, [r2, #0]
 8003e16:	681d      	ldr	r5, [r3, #0]
 8003e18:	6862      	ldr	r2, [r4, #4]
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f7fc f9df 	bl	80001e0 <memchr>
 8003e22:	b108      	cbz	r0, 8003e28 <_printf_i+0x1bc>
 8003e24:	1b40      	subs	r0, r0, r5
 8003e26:	6060      	str	r0, [r4, #4]
 8003e28:	6863      	ldr	r3, [r4, #4]
 8003e2a:	6123      	str	r3, [r4, #16]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e32:	e7a7      	b.n	8003d84 <_printf_i+0x118>
 8003e34:	6923      	ldr	r3, [r4, #16]
 8003e36:	462a      	mov	r2, r5
 8003e38:	4639      	mov	r1, r7
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	47c0      	blx	r8
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d0aa      	beq.n	8003d98 <_printf_i+0x12c>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	079b      	lsls	r3, r3, #30
 8003e46:	d413      	bmi.n	8003e70 <_printf_i+0x204>
 8003e48:	68e0      	ldr	r0, [r4, #12]
 8003e4a:	9b03      	ldr	r3, [sp, #12]
 8003e4c:	4298      	cmp	r0, r3
 8003e4e:	bfb8      	it	lt
 8003e50:	4618      	movlt	r0, r3
 8003e52:	e7a3      	b.n	8003d9c <_printf_i+0x130>
 8003e54:	2301      	movs	r3, #1
 8003e56:	464a      	mov	r2, r9
 8003e58:	4639      	mov	r1, r7
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	47c0      	blx	r8
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d09a      	beq.n	8003d98 <_printf_i+0x12c>
 8003e62:	3501      	adds	r5, #1
 8003e64:	68e3      	ldr	r3, [r4, #12]
 8003e66:	9a03      	ldr	r2, [sp, #12]
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	42ab      	cmp	r3, r5
 8003e6c:	dcf2      	bgt.n	8003e54 <_printf_i+0x1e8>
 8003e6e:	e7eb      	b.n	8003e48 <_printf_i+0x1dc>
 8003e70:	2500      	movs	r5, #0
 8003e72:	f104 0919 	add.w	r9, r4, #25
 8003e76:	e7f5      	b.n	8003e64 <_printf_i+0x1f8>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ac      	bne.n	8003dd6 <_printf_i+0x16a>
 8003e7c:	7803      	ldrb	r3, [r0, #0]
 8003e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e86:	e76c      	b.n	8003d62 <_printf_i+0xf6>
 8003e88:	080040ed 	.word	0x080040ed
 8003e8c:	080040fe 	.word	0x080040fe

08003e90 <memcpy>:
 8003e90:	b510      	push	{r4, lr}
 8003e92:	1e43      	subs	r3, r0, #1
 8003e94:	440a      	add	r2, r1
 8003e96:	4291      	cmp	r1, r2
 8003e98:	d100      	bne.n	8003e9c <memcpy+0xc>
 8003e9a:	bd10      	pop	{r4, pc}
 8003e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ea4:	e7f7      	b.n	8003e96 <memcpy+0x6>

08003ea6 <memmove>:
 8003ea6:	4288      	cmp	r0, r1
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	eb01 0302 	add.w	r3, r1, r2
 8003eae:	d807      	bhi.n	8003ec0 <memmove+0x1a>
 8003eb0:	1e42      	subs	r2, r0, #1
 8003eb2:	4299      	cmp	r1, r3
 8003eb4:	d00a      	beq.n	8003ecc <memmove+0x26>
 8003eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ebe:	e7f8      	b.n	8003eb2 <memmove+0xc>
 8003ec0:	4283      	cmp	r3, r0
 8003ec2:	d9f5      	bls.n	8003eb0 <memmove+0xa>
 8003ec4:	1881      	adds	r1, r0, r2
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	42d3      	cmn	r3, r2
 8003eca:	d100      	bne.n	8003ece <memmove+0x28>
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ed2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ed6:	e7f7      	b.n	8003ec8 <memmove+0x22>

08003ed8 <_free_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4605      	mov	r5, r0
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d045      	beq.n	8003f6c <_free_r+0x94>
 8003ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee4:	1f0c      	subs	r4, r1, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bfb8      	it	lt
 8003eea:	18e4      	addlt	r4, r4, r3
 8003eec:	f000 f8d2 	bl	8004094 <__malloc_lock>
 8003ef0:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <_free_r+0x98>)
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	b933      	cbnz	r3, 8003f06 <_free_r+0x2e>
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	6014      	str	r4, [r2, #0]
 8003efc:	4628      	mov	r0, r5
 8003efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f02:	f000 b8c8 	b.w	8004096 <__malloc_unlock>
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	d90c      	bls.n	8003f24 <_free_r+0x4c>
 8003f0a:	6821      	ldr	r1, [r4, #0]
 8003f0c:	1862      	adds	r2, r4, r1
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	bf04      	itt	eq
 8003f12:	681a      	ldreq	r2, [r3, #0]
 8003f14:	685b      	ldreq	r3, [r3, #4]
 8003f16:	6063      	str	r3, [r4, #4]
 8003f18:	bf04      	itt	eq
 8003f1a:	1852      	addeq	r2, r2, r1
 8003f1c:	6022      	streq	r2, [r4, #0]
 8003f1e:	6004      	str	r4, [r0, #0]
 8003f20:	e7ec      	b.n	8003efc <_free_r+0x24>
 8003f22:	4613      	mov	r3, r2
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	b10a      	cbz	r2, 8003f2c <_free_r+0x54>
 8003f28:	42a2      	cmp	r2, r4
 8003f2a:	d9fa      	bls.n	8003f22 <_free_r+0x4a>
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	1858      	adds	r0, r3, r1
 8003f30:	42a0      	cmp	r0, r4
 8003f32:	d10b      	bne.n	8003f4c <_free_r+0x74>
 8003f34:	6820      	ldr	r0, [r4, #0]
 8003f36:	4401      	add	r1, r0
 8003f38:	1858      	adds	r0, r3, r1
 8003f3a:	4282      	cmp	r2, r0
 8003f3c:	6019      	str	r1, [r3, #0]
 8003f3e:	d1dd      	bne.n	8003efc <_free_r+0x24>
 8003f40:	6810      	ldr	r0, [r2, #0]
 8003f42:	6852      	ldr	r2, [r2, #4]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	4401      	add	r1, r0
 8003f48:	6019      	str	r1, [r3, #0]
 8003f4a:	e7d7      	b.n	8003efc <_free_r+0x24>
 8003f4c:	d902      	bls.n	8003f54 <_free_r+0x7c>
 8003f4e:	230c      	movs	r3, #12
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	e7d3      	b.n	8003efc <_free_r+0x24>
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	1821      	adds	r1, r4, r0
 8003f58:	428a      	cmp	r2, r1
 8003f5a:	bf04      	itt	eq
 8003f5c:	6811      	ldreq	r1, [r2, #0]
 8003f5e:	6852      	ldreq	r2, [r2, #4]
 8003f60:	6062      	str	r2, [r4, #4]
 8003f62:	bf04      	itt	eq
 8003f64:	1809      	addeq	r1, r1, r0
 8003f66:	6021      	streq	r1, [r4, #0]
 8003f68:	605c      	str	r4, [r3, #4]
 8003f6a:	e7c7      	b.n	8003efc <_free_r+0x24>
 8003f6c:	bd38      	pop	{r3, r4, r5, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000098 	.word	0x20000098

08003f74 <_malloc_r>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	1ccd      	adds	r5, r1, #3
 8003f78:	f025 0503 	bic.w	r5, r5, #3
 8003f7c:	3508      	adds	r5, #8
 8003f7e:	2d0c      	cmp	r5, #12
 8003f80:	bf38      	it	cc
 8003f82:	250c      	movcc	r5, #12
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	4606      	mov	r6, r0
 8003f88:	db01      	blt.n	8003f8e <_malloc_r+0x1a>
 8003f8a:	42a9      	cmp	r1, r5
 8003f8c:	d903      	bls.n	8003f96 <_malloc_r+0x22>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	2000      	movs	r0, #0
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
 8003f96:	f000 f87d 	bl	8004094 <__malloc_lock>
 8003f9a:	4a21      	ldr	r2, [pc, #132]	; (8004020 <_malloc_r+0xac>)
 8003f9c:	6814      	ldr	r4, [r2, #0]
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	b991      	cbnz	r1, 8003fc8 <_malloc_r+0x54>
 8003fa2:	4c20      	ldr	r4, [pc, #128]	; (8004024 <_malloc_r+0xb0>)
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	b91b      	cbnz	r3, 8003fb0 <_malloc_r+0x3c>
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f000 f863 	bl	8004074 <_sbrk_r>
 8003fae:	6020      	str	r0, [r4, #0]
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f000 f85e 	bl	8004074 <_sbrk_r>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d124      	bne.n	8004006 <_malloc_r+0x92>
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	6033      	str	r3, [r6, #0]
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f000 f868 	bl	8004096 <__malloc_unlock>
 8003fc6:	e7e4      	b.n	8003f92 <_malloc_r+0x1e>
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	1b5b      	subs	r3, r3, r5
 8003fcc:	d418      	bmi.n	8004000 <_malloc_r+0x8c>
 8003fce:	2b0b      	cmp	r3, #11
 8003fd0:	d90f      	bls.n	8003ff2 <_malloc_r+0x7e>
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	50cd      	str	r5, [r1, r3]
 8003fd6:	18cc      	adds	r4, r1, r3
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f85c 	bl	8004096 <__malloc_unlock>
 8003fde:	f104 000b 	add.w	r0, r4, #11
 8003fe2:	1d23      	adds	r3, r4, #4
 8003fe4:	f020 0007 	bic.w	r0, r0, #7
 8003fe8:	1ac3      	subs	r3, r0, r3
 8003fea:	d0d3      	beq.n	8003f94 <_malloc_r+0x20>
 8003fec:	425a      	negs	r2, r3
 8003fee:	50e2      	str	r2, [r4, r3]
 8003ff0:	e7d0      	b.n	8003f94 <_malloc_r+0x20>
 8003ff2:	428c      	cmp	r4, r1
 8003ff4:	684b      	ldr	r3, [r1, #4]
 8003ff6:	bf16      	itet	ne
 8003ff8:	6063      	strne	r3, [r4, #4]
 8003ffa:	6013      	streq	r3, [r2, #0]
 8003ffc:	460c      	movne	r4, r1
 8003ffe:	e7eb      	b.n	8003fd8 <_malloc_r+0x64>
 8004000:	460c      	mov	r4, r1
 8004002:	6849      	ldr	r1, [r1, #4]
 8004004:	e7cc      	b.n	8003fa0 <_malloc_r+0x2c>
 8004006:	1cc4      	adds	r4, r0, #3
 8004008:	f024 0403 	bic.w	r4, r4, #3
 800400c:	42a0      	cmp	r0, r4
 800400e:	d005      	beq.n	800401c <_malloc_r+0xa8>
 8004010:	1a21      	subs	r1, r4, r0
 8004012:	4630      	mov	r0, r6
 8004014:	f000 f82e 	bl	8004074 <_sbrk_r>
 8004018:	3001      	adds	r0, #1
 800401a:	d0cf      	beq.n	8003fbc <_malloc_r+0x48>
 800401c:	6025      	str	r5, [r4, #0]
 800401e:	e7db      	b.n	8003fd8 <_malloc_r+0x64>
 8004020:	20000098 	.word	0x20000098
 8004024:	2000009c 	.word	0x2000009c

08004028 <_realloc_r>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	4607      	mov	r7, r0
 800402c:	4614      	mov	r4, r2
 800402e:	460e      	mov	r6, r1
 8004030:	b921      	cbnz	r1, 800403c <_realloc_r+0x14>
 8004032:	4611      	mov	r1, r2
 8004034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004038:	f7ff bf9c 	b.w	8003f74 <_malloc_r>
 800403c:	b922      	cbnz	r2, 8004048 <_realloc_r+0x20>
 800403e:	f7ff ff4b 	bl	8003ed8 <_free_r>
 8004042:	4625      	mov	r5, r4
 8004044:	4628      	mov	r0, r5
 8004046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004048:	f000 f826 	bl	8004098 <_malloc_usable_size_r>
 800404c:	42a0      	cmp	r0, r4
 800404e:	d20f      	bcs.n	8004070 <_realloc_r+0x48>
 8004050:	4621      	mov	r1, r4
 8004052:	4638      	mov	r0, r7
 8004054:	f7ff ff8e 	bl	8003f74 <_malloc_r>
 8004058:	4605      	mov	r5, r0
 800405a:	2800      	cmp	r0, #0
 800405c:	d0f2      	beq.n	8004044 <_realloc_r+0x1c>
 800405e:	4631      	mov	r1, r6
 8004060:	4622      	mov	r2, r4
 8004062:	f7ff ff15 	bl	8003e90 <memcpy>
 8004066:	4631      	mov	r1, r6
 8004068:	4638      	mov	r0, r7
 800406a:	f7ff ff35 	bl	8003ed8 <_free_r>
 800406e:	e7e9      	b.n	8004044 <_realloc_r+0x1c>
 8004070:	4635      	mov	r5, r6
 8004072:	e7e7      	b.n	8004044 <_realloc_r+0x1c>

08004074 <_sbrk_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4c06      	ldr	r4, [pc, #24]	; (8004090 <_sbrk_r+0x1c>)
 8004078:	2300      	movs	r3, #0
 800407a:	4605      	mov	r5, r0
 800407c:	4608      	mov	r0, r1
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	f7fc feb0 	bl	8000de4 <_sbrk>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_sbrk_r+0x1a>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	b103      	cbz	r3, 800408e <_sbrk_r+0x1a>
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	200001d0 	.word	0x200001d0

08004094 <__malloc_lock>:
 8004094:	4770      	bx	lr

08004096 <__malloc_unlock>:
 8004096:	4770      	bx	lr

08004098 <_malloc_usable_size_r>:
 8004098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800409c:	1f18      	subs	r0, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bfbc      	itt	lt
 80040a2:	580b      	ldrlt	r3, [r1, r0]
 80040a4:	18c0      	addlt	r0, r0, r3
 80040a6:	4770      	bx	lr

080040a8 <_init>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr

080040b4 <_fini>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr
